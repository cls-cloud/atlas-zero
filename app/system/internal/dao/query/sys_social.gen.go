// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"system/internal/dao/model"
)

func newSysSocial(db *gorm.DB, opts ...gen.DOOption) sysSocial {
	_sysSocial := sysSocial{}

	_sysSocial.sysSocialDo.UseDB(db, opts...)
	_sysSocial.sysSocialDo.UseModel(&model.SysSocial{})

	tableName := _sysSocial.sysSocialDo.TableName()
	_sysSocial.ALL = field.NewAsterisk(tableName)
	_sysSocial.ID = field.NewString(tableName, "id")
	_sysSocial.UserID = field.NewString(tableName, "user_id")
	_sysSocial.TenantID = field.NewString(tableName, "tenant_id")
	_sysSocial.AuthID = field.NewString(tableName, "auth_id")
	_sysSocial.Source = field.NewString(tableName, "source")
	_sysSocial.OpenID = field.NewString(tableName, "open_id")
	_sysSocial.UserName = field.NewString(tableName, "user_name")
	_sysSocial.NickName = field.NewString(tableName, "nick_name")
	_sysSocial.Email = field.NewString(tableName, "email")
	_sysSocial.Avatar = field.NewString(tableName, "avatar")
	_sysSocial.AccessToken = field.NewString(tableName, "access_token")
	_sysSocial.ExpireIn = field.NewInt32(tableName, "expire_in")
	_sysSocial.RefreshToken = field.NewString(tableName, "refresh_token")
	_sysSocial.AccessCode = field.NewString(tableName, "access_code")
	_sysSocial.UnionID = field.NewString(tableName, "union_id")
	_sysSocial.Scope = field.NewString(tableName, "scope")
	_sysSocial.TokenType = field.NewString(tableName, "token_type")
	_sysSocial.IDToken = field.NewString(tableName, "id_token")
	_sysSocial.MacAlgorithm = field.NewString(tableName, "mac_algorithm")
	_sysSocial.MacKey = field.NewString(tableName, "mac_key")
	_sysSocial.Code = field.NewString(tableName, "code")
	_sysSocial.OauthToken = field.NewString(tableName, "oauth_token")
	_sysSocial.OauthTokenSecret = field.NewString(tableName, "oauth_token_secret")
	_sysSocial.CreateDept = field.NewInt64(tableName, "create_dept")
	_sysSocial.CreateBy = field.NewInt64(tableName, "create_by")
	_sysSocial.CreateTime = field.NewTime(tableName, "create_time")
	_sysSocial.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysSocial.UpdateTime = field.NewTime(tableName, "update_time")
	_sysSocial.DelFlag = field.NewString(tableName, "del_flag")

	_sysSocial.fillFieldMap()

	return _sysSocial
}

// sysSocial 社会化关系表
type sysSocial struct {
	sysSocialDo sysSocialDo

	ALL              field.Asterisk
	ID               field.String // 主键
	UserID           field.String // 用户ID
	TenantID         field.String // 租户id
	AuthID           field.String // 平台+平台唯一id
	Source           field.String // 用户来源
	OpenID           field.String // 平台编号唯一id
	UserName         field.String // 登录账号
	NickName         field.String // 用户昵称
	Email            field.String // 用户邮箱
	Avatar           field.String // 头像地址
	AccessToken      field.String // 用户的授权令牌
	ExpireIn         field.Int32  // 用户的授权令牌的有效期，部分平台可能没有
	RefreshToken     field.String // 刷新令牌，部分平台可能没有
	AccessCode       field.String // 平台的授权信息，部分平台可能没有
	UnionID          field.String // 用户的 unionid
	Scope            field.String // 授予的权限，部分平台可能没有
	TokenType        field.String // 个别平台的授权信息，部分平台可能没有
	IDToken          field.String // id token，部分平台可能没有
	MacAlgorithm     field.String // 小米平台用户的附带属性，部分平台可能没有
	MacKey           field.String // 小米平台用户的附带属性，部分平台可能没有
	Code             field.String // 用户的授权code，部分平台可能没有
	OauthToken       field.String // Twitter平台用户的附带属性，部分平台可能没有
	OauthTokenSecret field.String // Twitter平台用户的附带属性，部分平台可能没有
	CreateDept       field.Int64  // 创建部门
	CreateBy         field.Int64  // 创建者
	CreateTime       field.Time   // 创建时间
	UpdateBy         field.Int64  // 更新者
	UpdateTime       field.Time   // 更新时间
	DelFlag          field.String // 删除标志（0代表存在 1代表删除）

	fieldMap map[string]field.Expr
}

func (s sysSocial) Table(newTableName string) *sysSocial {
	s.sysSocialDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysSocial) As(alias string) *sysSocial {
	s.sysSocialDo.DO = *(s.sysSocialDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysSocial) updateTableName(table string) *sysSocial {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.TenantID = field.NewString(table, "tenant_id")
	s.AuthID = field.NewString(table, "auth_id")
	s.Source = field.NewString(table, "source")
	s.OpenID = field.NewString(table, "open_id")
	s.UserName = field.NewString(table, "user_name")
	s.NickName = field.NewString(table, "nick_name")
	s.Email = field.NewString(table, "email")
	s.Avatar = field.NewString(table, "avatar")
	s.AccessToken = field.NewString(table, "access_token")
	s.ExpireIn = field.NewInt32(table, "expire_in")
	s.RefreshToken = field.NewString(table, "refresh_token")
	s.AccessCode = field.NewString(table, "access_code")
	s.UnionID = field.NewString(table, "union_id")
	s.Scope = field.NewString(table, "scope")
	s.TokenType = field.NewString(table, "token_type")
	s.IDToken = field.NewString(table, "id_token")
	s.MacAlgorithm = field.NewString(table, "mac_algorithm")
	s.MacKey = field.NewString(table, "mac_key")
	s.Code = field.NewString(table, "code")
	s.OauthToken = field.NewString(table, "oauth_token")
	s.OauthTokenSecret = field.NewString(table, "oauth_token_secret")
	s.CreateDept = field.NewInt64(table, "create_dept")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.DelFlag = field.NewString(table, "del_flag")

	s.fillFieldMap()

	return s
}

func (s *sysSocial) WithContext(ctx context.Context) *sysSocialDo {
	return s.sysSocialDo.WithContext(ctx)
}

func (s sysSocial) TableName() string { return s.sysSocialDo.TableName() }

func (s sysSocial) Alias() string { return s.sysSocialDo.Alias() }

func (s sysSocial) Columns(cols ...field.Expr) gen.Columns { return s.sysSocialDo.Columns(cols...) }

func (s *sysSocial) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysSocial) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 29)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["tenant_id"] = s.TenantID
	s.fieldMap["auth_id"] = s.AuthID
	s.fieldMap["source"] = s.Source
	s.fieldMap["open_id"] = s.OpenID
	s.fieldMap["user_name"] = s.UserName
	s.fieldMap["nick_name"] = s.NickName
	s.fieldMap["email"] = s.Email
	s.fieldMap["avatar"] = s.Avatar
	s.fieldMap["access_token"] = s.AccessToken
	s.fieldMap["expire_in"] = s.ExpireIn
	s.fieldMap["refresh_token"] = s.RefreshToken
	s.fieldMap["access_code"] = s.AccessCode
	s.fieldMap["union_id"] = s.UnionID
	s.fieldMap["scope"] = s.Scope
	s.fieldMap["token_type"] = s.TokenType
	s.fieldMap["id_token"] = s.IDToken
	s.fieldMap["mac_algorithm"] = s.MacAlgorithm
	s.fieldMap["mac_key"] = s.MacKey
	s.fieldMap["code"] = s.Code
	s.fieldMap["oauth_token"] = s.OauthToken
	s.fieldMap["oauth_token_secret"] = s.OauthTokenSecret
	s.fieldMap["create_dept"] = s.CreateDept
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["del_flag"] = s.DelFlag
}

func (s sysSocial) clone(db *gorm.DB) sysSocial {
	s.sysSocialDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysSocial) replaceDB(db *gorm.DB) sysSocial {
	s.sysSocialDo.ReplaceDB(db)
	return s
}

type sysSocialDo struct{ gen.DO }

func (s sysSocialDo) Debug() *sysSocialDo {
	return s.withDO(s.DO.Debug())
}

func (s sysSocialDo) WithContext(ctx context.Context) *sysSocialDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysSocialDo) ReadDB() *sysSocialDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysSocialDo) WriteDB() *sysSocialDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysSocialDo) Session(config *gorm.Session) *sysSocialDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysSocialDo) Clauses(conds ...clause.Expression) *sysSocialDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysSocialDo) Returning(value interface{}, columns ...string) *sysSocialDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysSocialDo) Not(conds ...gen.Condition) *sysSocialDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysSocialDo) Or(conds ...gen.Condition) *sysSocialDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysSocialDo) Select(conds ...field.Expr) *sysSocialDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysSocialDo) Where(conds ...gen.Condition) *sysSocialDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysSocialDo) Order(conds ...field.Expr) *sysSocialDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysSocialDo) Distinct(cols ...field.Expr) *sysSocialDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysSocialDo) Omit(cols ...field.Expr) *sysSocialDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysSocialDo) Join(table schema.Tabler, on ...field.Expr) *sysSocialDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysSocialDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysSocialDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysSocialDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysSocialDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysSocialDo) Group(cols ...field.Expr) *sysSocialDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysSocialDo) Having(conds ...gen.Condition) *sysSocialDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysSocialDo) Limit(limit int) *sysSocialDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysSocialDo) Offset(offset int) *sysSocialDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysSocialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysSocialDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysSocialDo) Unscoped() *sysSocialDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysSocialDo) Create(values ...*model.SysSocial) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysSocialDo) CreateInBatches(values []*model.SysSocial, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysSocialDo) Save(values ...*model.SysSocial) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysSocialDo) First() (*model.SysSocial, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysSocial), nil
	}
}

func (s sysSocialDo) Take() (*model.SysSocial, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysSocial), nil
	}
}

func (s sysSocialDo) Last() (*model.SysSocial, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysSocial), nil
	}
}

func (s sysSocialDo) Find() ([]*model.SysSocial, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysSocial), err
}

func (s sysSocialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysSocial, err error) {
	buf := make([]*model.SysSocial, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysSocialDo) FindInBatches(result *[]*model.SysSocial, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysSocialDo) Attrs(attrs ...field.AssignExpr) *sysSocialDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysSocialDo) Assign(attrs ...field.AssignExpr) *sysSocialDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysSocialDo) Joins(fields ...field.RelationField) *sysSocialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysSocialDo) Preload(fields ...field.RelationField) *sysSocialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysSocialDo) FirstOrInit() (*model.SysSocial, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysSocial), nil
	}
}

func (s sysSocialDo) FirstOrCreate() (*model.SysSocial, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysSocial), nil
	}
}

func (s sysSocialDo) FindByPage(offset int, limit int) (result []*model.SysSocial, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysSocialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysSocialDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysSocialDo) Delete(models ...*model.SysSocial) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysSocialDo) withDO(do gen.Dao) *sysSocialDo {
	s.DO = *do.(*gen.DO)
	return s
}
