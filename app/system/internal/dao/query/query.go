// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		SysDept:          newSysDept(db, opts...),
		SysMenu:          newSysMenu(db, opts...),
		SysRole:          newSysRole(db, opts...),
		SysRoleMenu:      newSysRoleMenu(db, opts...),
		SysTenant:        newSysTenant(db, opts...),
		SysTenantPackage: newSysTenantPackage(db, opts...),
		SysUser:          newSysUser(db, opts...),
		SysUserRole:      newSysUserRole(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	SysDept          sysDept
	SysMenu          sysMenu
	SysRole          sysRole
	SysRoleMenu      sysRoleMenu
	SysTenant        sysTenant
	SysTenantPackage sysTenantPackage
	SysUser          sysUser
	SysUserRole      sysUserRole
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		SysDept:          q.SysDept.clone(db),
		SysMenu:          q.SysMenu.clone(db),
		SysRole:          q.SysRole.clone(db),
		SysRoleMenu:      q.SysRoleMenu.clone(db),
		SysTenant:        q.SysTenant.clone(db),
		SysTenantPackage: q.SysTenantPackage.clone(db),
		SysUser:          q.SysUser.clone(db),
		SysUserRole:      q.SysUserRole.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		SysDept:          q.SysDept.replaceDB(db),
		SysMenu:          q.SysMenu.replaceDB(db),
		SysRole:          q.SysRole.replaceDB(db),
		SysRoleMenu:      q.SysRoleMenu.replaceDB(db),
		SysTenant:        q.SysTenant.replaceDB(db),
		SysTenantPackage: q.SysTenantPackage.replaceDB(db),
		SysUser:          q.SysUser.replaceDB(db),
		SysUserRole:      q.SysUserRole.replaceDB(db),
	}
}

type queryCtx struct {
	SysDept          *sysDeptDo
	SysMenu          *sysMenuDo
	SysRole          *sysRoleDo
	SysRoleMenu      *sysRoleMenuDo
	SysTenant        *sysTenantDo
	SysTenantPackage *sysTenantPackageDo
	SysUser          *sysUserDo
	SysUserRole      *sysUserRoleDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		SysDept:          q.SysDept.WithContext(ctx),
		SysMenu:          q.SysMenu.WithContext(ctx),
		SysRole:          q.SysRole.WithContext(ctx),
		SysRoleMenu:      q.SysRoleMenu.WithContext(ctx),
		SysTenant:        q.SysTenant.WithContext(ctx),
		SysTenantPackage: q.SysTenantPackage.WithContext(ctx),
		SysUser:          q.SysUser.WithContext(ctx),
		SysUserRole:      q.SysUserRole.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
