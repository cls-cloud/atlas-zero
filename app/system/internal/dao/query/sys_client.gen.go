// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"system/internal/dao/model"
)

func newSysClient(db *gorm.DB, opts ...gen.DOOption) sysClient {
	_sysClient := sysClient{}

	_sysClient.sysClientDo.UseDB(db, opts...)
	_sysClient.sysClientDo.UseModel(&model.SysClient{})

	tableName := _sysClient.sysClientDo.TableName()
	_sysClient.ALL = field.NewAsterisk(tableName)
	_sysClient.ID = field.NewString(tableName, "id")
	_sysClient.ClientID = field.NewString(tableName, "client_id")
	_sysClient.ClientKey = field.NewString(tableName, "client_key")
	_sysClient.ClientSecret = field.NewString(tableName, "client_secret")
	_sysClient.GrantType = field.NewString(tableName, "grant_type")
	_sysClient.DeviceType = field.NewString(tableName, "device_type")
	_sysClient.ActiveTimeout = field.NewInt32(tableName, "active_timeout")
	_sysClient.Timeout = field.NewInt32(tableName, "timeout")
	_sysClient.Status = field.NewString(tableName, "status")
	_sysClient.DelFlag = field.NewString(tableName, "del_flag")
	_sysClient.CreateDept = field.NewInt64(tableName, "create_dept")
	_sysClient.CreateBy = field.NewInt64(tableName, "create_by")
	_sysClient.CreateTime = field.NewTime(tableName, "create_time")
	_sysClient.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysClient.UpdateTime = field.NewTime(tableName, "update_time")

	_sysClient.fillFieldMap()

	return _sysClient
}

// sysClient 系统授权表
type sysClient struct {
	sysClientDo sysClientDo

	ALL           field.Asterisk
	ID            field.String // id
	ClientID      field.String // 客户端id
	ClientKey     field.String // 客户端key
	ClientSecret  field.String // 客户端秘钥
	GrantType     field.String // 授权类型
	DeviceType    field.String // 设备类型
	ActiveTimeout field.Int32  // token活跃超时时间
	Timeout       field.Int32  // token固定超时
	Status        field.String // 状态（0正常 1停用）
	DelFlag       field.String // 删除标志（0代表存在 1代表删除）
	CreateDept    field.Int64  // 创建部门
	CreateBy      field.Int64  // 创建者
	CreateTime    field.Time   // 创建时间
	UpdateBy      field.Int64  // 更新者
	UpdateTime    field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s sysClient) Table(newTableName string) *sysClient {
	s.sysClientDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysClient) As(alias string) *sysClient {
	s.sysClientDo.DO = *(s.sysClientDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysClient) updateTableName(table string) *sysClient {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.ClientID = field.NewString(table, "client_id")
	s.ClientKey = field.NewString(table, "client_key")
	s.ClientSecret = field.NewString(table, "client_secret")
	s.GrantType = field.NewString(table, "grant_type")
	s.DeviceType = field.NewString(table, "device_type")
	s.ActiveTimeout = field.NewInt32(table, "active_timeout")
	s.Timeout = field.NewInt32(table, "timeout")
	s.Status = field.NewString(table, "status")
	s.DelFlag = field.NewString(table, "del_flag")
	s.CreateDept = field.NewInt64(table, "create_dept")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")

	s.fillFieldMap()

	return s
}

func (s *sysClient) WithContext(ctx context.Context) *sysClientDo {
	return s.sysClientDo.WithContext(ctx)
}

func (s sysClient) TableName() string { return s.sysClientDo.TableName() }

func (s sysClient) Alias() string { return s.sysClientDo.Alias() }

func (s sysClient) Columns(cols ...field.Expr) gen.Columns { return s.sysClientDo.Columns(cols...) }

func (s *sysClient) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysClient) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 15)
	s.fieldMap["id"] = s.ID
	s.fieldMap["client_id"] = s.ClientID
	s.fieldMap["client_key"] = s.ClientKey
	s.fieldMap["client_secret"] = s.ClientSecret
	s.fieldMap["grant_type"] = s.GrantType
	s.fieldMap["device_type"] = s.DeviceType
	s.fieldMap["active_timeout"] = s.ActiveTimeout
	s.fieldMap["timeout"] = s.Timeout
	s.fieldMap["status"] = s.Status
	s.fieldMap["del_flag"] = s.DelFlag
	s.fieldMap["create_dept"] = s.CreateDept
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
}

func (s sysClient) clone(db *gorm.DB) sysClient {
	s.sysClientDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysClient) replaceDB(db *gorm.DB) sysClient {
	s.sysClientDo.ReplaceDB(db)
	return s
}

type sysClientDo struct{ gen.DO }

func (s sysClientDo) Debug() *sysClientDo {
	return s.withDO(s.DO.Debug())
}

func (s sysClientDo) WithContext(ctx context.Context) *sysClientDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysClientDo) ReadDB() *sysClientDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysClientDo) WriteDB() *sysClientDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysClientDo) Session(config *gorm.Session) *sysClientDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysClientDo) Clauses(conds ...clause.Expression) *sysClientDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysClientDo) Returning(value interface{}, columns ...string) *sysClientDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysClientDo) Not(conds ...gen.Condition) *sysClientDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysClientDo) Or(conds ...gen.Condition) *sysClientDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysClientDo) Select(conds ...field.Expr) *sysClientDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysClientDo) Where(conds ...gen.Condition) *sysClientDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysClientDo) Order(conds ...field.Expr) *sysClientDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysClientDo) Distinct(cols ...field.Expr) *sysClientDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysClientDo) Omit(cols ...field.Expr) *sysClientDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysClientDo) Join(table schema.Tabler, on ...field.Expr) *sysClientDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysClientDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysClientDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysClientDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysClientDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysClientDo) Group(cols ...field.Expr) *sysClientDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysClientDo) Having(conds ...gen.Condition) *sysClientDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysClientDo) Limit(limit int) *sysClientDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysClientDo) Offset(offset int) *sysClientDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysClientDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysClientDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysClientDo) Unscoped() *sysClientDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysClientDo) Create(values ...*model.SysClient) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysClientDo) CreateInBatches(values []*model.SysClient, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysClientDo) Save(values ...*model.SysClient) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysClientDo) First() (*model.SysClient, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysClient), nil
	}
}

func (s sysClientDo) Take() (*model.SysClient, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysClient), nil
	}
}

func (s sysClientDo) Last() (*model.SysClient, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysClient), nil
	}
}

func (s sysClientDo) Find() ([]*model.SysClient, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysClient), err
}

func (s sysClientDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysClient, err error) {
	buf := make([]*model.SysClient, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysClientDo) FindInBatches(result *[]*model.SysClient, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysClientDo) Attrs(attrs ...field.AssignExpr) *sysClientDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysClientDo) Assign(attrs ...field.AssignExpr) *sysClientDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysClientDo) Joins(fields ...field.RelationField) *sysClientDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysClientDo) Preload(fields ...field.RelationField) *sysClientDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysClientDo) FirstOrInit() (*model.SysClient, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysClient), nil
	}
}

func (s sysClientDo) FirstOrCreate() (*model.SysClient, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysClient), nil
	}
}

func (s sysClientDo) FindByPage(offset int, limit int) (result []*model.SysClient, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysClientDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysClientDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysClientDo) Delete(models ...*model.SysClient) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysClientDo) withDO(do gen.Dao) *sysClientDo {
	s.DO = *do.(*gen.DO)
	return s
}
