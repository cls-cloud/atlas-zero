// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"system/internal/dao/model"
)

func newSysTenantPackage(db *gorm.DB, opts ...gen.DOOption) sysTenantPackage {
	_sysTenantPackage := sysTenantPackage{}

	_sysTenantPackage.sysTenantPackageDo.UseDB(db, opts...)
	_sysTenantPackage.sysTenantPackageDo.UseModel(&model.SysTenantPackage{})

	tableName := _sysTenantPackage.sysTenantPackageDo.TableName()
	_sysTenantPackage.ALL = field.NewAsterisk(tableName)
	_sysTenantPackage.PackageID = field.NewString(tableName, "package_id")
	_sysTenantPackage.PackageName = field.NewString(tableName, "package_name")
	_sysTenantPackage.MenuIds = field.NewString(tableName, "menu_ids")
	_sysTenantPackage.Remark = field.NewString(tableName, "remark")
	_sysTenantPackage.MenuCheckStrictly = field.NewBool(tableName, "menu_check_strictly")
	_sysTenantPackage.Status = field.NewString(tableName, "status")
	_sysTenantPackage.DelFlag = field.NewString(tableName, "del_flag")
	_sysTenantPackage.CreateDept = field.NewInt64(tableName, "create_dept")
	_sysTenantPackage.CreateBy = field.NewInt64(tableName, "create_by")
	_sysTenantPackage.CreateTime = field.NewTime(tableName, "create_time")
	_sysTenantPackage.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysTenantPackage.UpdateTime = field.NewTime(tableName, "update_time")

	_sysTenantPackage.fillFieldMap()

	return _sysTenantPackage
}

// sysTenantPackage 租户套餐表
type sysTenantPackage struct {
	sysTenantPackageDo sysTenantPackageDo

	ALL               field.Asterisk
	PackageID         field.String // 租户套餐id
	PackageName       field.String // 套餐名称
	MenuIds           field.String // 关联菜单id
	Remark            field.String // 备注
	MenuCheckStrictly field.Bool   // 菜单树选择项是否关联显示
	Status            field.String // 状态（0正常 1停用）
	DelFlag           field.String // 删除标志（0代表存在 1代表删除）
	CreateDept        field.Int64  // 创建部门
	CreateBy          field.Int64  // 创建者
	CreateTime        field.Time   // 创建时间
	UpdateBy          field.Int64  // 更新者
	UpdateTime        field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s sysTenantPackage) Table(newTableName string) *sysTenantPackage {
	s.sysTenantPackageDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysTenantPackage) As(alias string) *sysTenantPackage {
	s.sysTenantPackageDo.DO = *(s.sysTenantPackageDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysTenantPackage) updateTableName(table string) *sysTenantPackage {
	s.ALL = field.NewAsterisk(table)
	s.PackageID = field.NewString(table, "package_id")
	s.PackageName = field.NewString(table, "package_name")
	s.MenuIds = field.NewString(table, "menu_ids")
	s.Remark = field.NewString(table, "remark")
	s.MenuCheckStrictly = field.NewBool(table, "menu_check_strictly")
	s.Status = field.NewString(table, "status")
	s.DelFlag = field.NewString(table, "del_flag")
	s.CreateDept = field.NewInt64(table, "create_dept")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")

	s.fillFieldMap()

	return s
}

func (s *sysTenantPackage) WithContext(ctx context.Context) *sysTenantPackageDo {
	return s.sysTenantPackageDo.WithContext(ctx)
}

func (s sysTenantPackage) TableName() string { return s.sysTenantPackageDo.TableName() }

func (s sysTenantPackage) Alias() string { return s.sysTenantPackageDo.Alias() }

func (s sysTenantPackage) Columns(cols ...field.Expr) gen.Columns {
	return s.sysTenantPackageDo.Columns(cols...)
}

func (s *sysTenantPackage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysTenantPackage) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["package_id"] = s.PackageID
	s.fieldMap["package_name"] = s.PackageName
	s.fieldMap["menu_ids"] = s.MenuIds
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["menu_check_strictly"] = s.MenuCheckStrictly
	s.fieldMap["status"] = s.Status
	s.fieldMap["del_flag"] = s.DelFlag
	s.fieldMap["create_dept"] = s.CreateDept
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
}

func (s sysTenantPackage) clone(db *gorm.DB) sysTenantPackage {
	s.sysTenantPackageDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysTenantPackage) replaceDB(db *gorm.DB) sysTenantPackage {
	s.sysTenantPackageDo.ReplaceDB(db)
	return s
}

type sysTenantPackageDo struct{ gen.DO }

func (s sysTenantPackageDo) Debug() *sysTenantPackageDo {
	return s.withDO(s.DO.Debug())
}

func (s sysTenantPackageDo) WithContext(ctx context.Context) *sysTenantPackageDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysTenantPackageDo) ReadDB() *sysTenantPackageDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysTenantPackageDo) WriteDB() *sysTenantPackageDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysTenantPackageDo) Session(config *gorm.Session) *sysTenantPackageDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysTenantPackageDo) Clauses(conds ...clause.Expression) *sysTenantPackageDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysTenantPackageDo) Returning(value interface{}, columns ...string) *sysTenantPackageDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysTenantPackageDo) Not(conds ...gen.Condition) *sysTenantPackageDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysTenantPackageDo) Or(conds ...gen.Condition) *sysTenantPackageDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysTenantPackageDo) Select(conds ...field.Expr) *sysTenantPackageDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysTenantPackageDo) Where(conds ...gen.Condition) *sysTenantPackageDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysTenantPackageDo) Order(conds ...field.Expr) *sysTenantPackageDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysTenantPackageDo) Distinct(cols ...field.Expr) *sysTenantPackageDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysTenantPackageDo) Omit(cols ...field.Expr) *sysTenantPackageDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysTenantPackageDo) Join(table schema.Tabler, on ...field.Expr) *sysTenantPackageDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysTenantPackageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysTenantPackageDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysTenantPackageDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysTenantPackageDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysTenantPackageDo) Group(cols ...field.Expr) *sysTenantPackageDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysTenantPackageDo) Having(conds ...gen.Condition) *sysTenantPackageDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysTenantPackageDo) Limit(limit int) *sysTenantPackageDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysTenantPackageDo) Offset(offset int) *sysTenantPackageDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysTenantPackageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysTenantPackageDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysTenantPackageDo) Unscoped() *sysTenantPackageDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysTenantPackageDo) Create(values ...*model.SysTenantPackage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysTenantPackageDo) CreateInBatches(values []*model.SysTenantPackage, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysTenantPackageDo) Save(values ...*model.SysTenantPackage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysTenantPackageDo) First() (*model.SysTenantPackage, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTenantPackage), nil
	}
}

func (s sysTenantPackageDo) Take() (*model.SysTenantPackage, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTenantPackage), nil
	}
}

func (s sysTenantPackageDo) Last() (*model.SysTenantPackage, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTenantPackage), nil
	}
}

func (s sysTenantPackageDo) Find() ([]*model.SysTenantPackage, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysTenantPackage), err
}

func (s sysTenantPackageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysTenantPackage, err error) {
	buf := make([]*model.SysTenantPackage, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysTenantPackageDo) FindInBatches(result *[]*model.SysTenantPackage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysTenantPackageDo) Attrs(attrs ...field.AssignExpr) *sysTenantPackageDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysTenantPackageDo) Assign(attrs ...field.AssignExpr) *sysTenantPackageDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysTenantPackageDo) Joins(fields ...field.RelationField) *sysTenantPackageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysTenantPackageDo) Preload(fields ...field.RelationField) *sysTenantPackageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysTenantPackageDo) FirstOrInit() (*model.SysTenantPackage, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTenantPackage), nil
	}
}

func (s sysTenantPackageDo) FirstOrCreate() (*model.SysTenantPackage, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTenantPackage), nil
	}
}

func (s sysTenantPackageDo) FindByPage(offset int, limit int) (result []*model.SysTenantPackage, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysTenantPackageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysTenantPackageDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysTenantPackageDo) Delete(models ...*model.SysTenantPackage) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysTenantPackageDo) withDO(do gen.Dao) *sysTenantPackageDo {
	s.DO = *do.(*gen.DO)
	return s
}
