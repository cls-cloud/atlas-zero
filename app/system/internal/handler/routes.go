// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package handler

import (
	"net/http"

	auth "system/internal/handler/auth"
	menu "system/internal/handler/menu"
	ping "system/internal/handler/ping"
	role "system/internal/handler/role"
	user "system/internal/handler/user"
	"system/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/ping",
				Handler: ping.PingHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/logout",
				Handler: auth.LogoutHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/code",
				Handler: auth.CaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/tenant/list",
				Handler: auth.TenantListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/getInfo",
					Handler: user.GetUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/addUser",
					Handler: user.AddUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteUser",
					Handler: user.DeleteUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUser",
					Handler: user.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUserStatus",
					Handler: user.UpdateUserStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserDetail",
					Handler: user.QueryUserDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPageUserList",
					Handler: user.QueryPageUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserList",
					Handler: user.QueryUserListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addRole",
				Handler: role.AddRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deleteRole",
				Handler: role.DeleteRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateRole",
				Handler: role.UpdateRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateRoleStatus",
				Handler: role.UpdateRoleStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryRoleDetail",
				Handler: role.QueryRoleDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryPageRoleList",
				Handler: role.QueryPageRoleListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryRoleList",
				Handler: role.QueryRoleListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: menu.GetMenuInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: menu.AddMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/delete",
					Handler: menu.DeleteMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: menu.UpdateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPageList",
					Handler: menu.QueryPageMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryList",
					Handler: menu.QueryMenuListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/menu"),
	)
}
