// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package handler

import (
	"net/http"

	_config "system/internal/handler/_config"
	_post "system/internal/handler/_post"
	auth "system/internal/handler/auth"
	dict_type "system/internal/handler/dict/_type"
	dictdata "system/internal/handler/dict/data"
	menu "system/internal/handler/menu"
	ping "system/internal/handler/ping"
	role "system/internal/handler/role"
	user "system/internal/handler/user"
	"system/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/ping",
				Handler: ping.PingHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/logout",
				Handler: auth.LogoutHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/code",
				Handler: auth.CaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/tenant/list",
				Handler: auth.TenantListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deptTree",
					Handler: user.GetDeptTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/getInfo",
					Handler: user.GetUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: user.QueryUserDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: user.QueryUserDetailInsertHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: user.AddUserHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:code",
					Handler: user.DeleteUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: user.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/changeStatus",
					Handler: user.UpdateUserStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: user.QueryPageUserListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addRole",
				Handler: role.AddRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deleteRole",
				Handler: role.DeleteRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateRole",
				Handler: role.UpdateRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateRoleStatus",
				Handler: role.UpdateRoleStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryRoleDetail",
				Handler: role.QueryRoleDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryPageRoleList",
				Handler: role.QueryPageRoleListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryRoleList",
				Handler: role.QueryRoleListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/getRouters",
					Handler: menu.GetRoutersHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: menu.GetMenuInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: menu.AddMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/delete",
					Handler: menu.DeleteMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: menu.UpdateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPageList",
					Handler: menu.QueryPageMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryList",
					Handler: menu.QueryMenuListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/optionselect",
					Handler: _post.OptionSelectHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: _post.GetPostInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: _post.AddPostHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/delete",
					Handler: _post.DeletePostHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: _post.UpdatePostHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPageList",
					Handler: _post.QueryPagePostListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryList",
					Handler: _post.QueryPostListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/post"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/configKey/:code",
					Handler: _config.ConfigKeyHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: _config.GetConfigInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: _config.AddConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/delete",
					Handler: _config.DeleteConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: _config.UpdateConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPageList",
					Handler: _config.QueryPageConfigListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryList",
					Handler: _config.QueryConfigListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/config"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/type/:code",
					Handler: dictdata.GetDataByTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: dictdata.GetDictDataInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: dictdata.AddDictDataHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/delete",
					Handler: dictdata.DeleteDictDataHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: dictdata.UpdateDictDataHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPageList",
					Handler: dictdata.QueryPageDictDataListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryList",
					Handler: dictdata.QueryDictDataListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/dict/data"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: dict_type.GetDictTypeInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add",
					Handler: dict_type.AddDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/delete",
					Handler: dict_type.DeleteDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: dict_type.UpdateDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPageList",
					Handler: dict_type.QueryPageDictTypeListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryList",
					Handler: dict_type.QueryDictTypeListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/dict/type"),
	)
}
