// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package handler

import (
	"net/http"

	_config "system/internal/handler/_config"
	_post "system/internal/handler/_post"
	auth "system/internal/handler/auth"
	client "system/internal/handler/client"
	dept "system/internal/handler/dept"
	dict_type "system/internal/handler/dict/_type"
	dictdata "system/internal/handler/dict/data"
	menu "system/internal/handler/menu"
	notice "system/internal/handler/notice"
	ping "system/internal/handler/ping"
	role "system/internal/handler/role"
	tenant "system/internal/handler/tenant"
	tenant_package "system/internal/handler/tenant/_package"
	user "system/internal/handler/user"
	"system/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/ping",
				Handler: ping.PingHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/logout",
				Handler: auth.LogoutHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/code",
				Handler: auth.CaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/tenant/list",
				Handler: auth.TenantListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deptTree",
					Handler: user.GetDeptTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/profile",
					Handler: user.ProfileHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/getInfo",
					Handler: user.GetUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: user.QueryUserDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: user.QueryUserDetailInsertHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: user.AddUserHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:code",
					Handler: user.DeleteUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: user.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/changeStatus",
					Handler: user.UpdateUserStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/resetPwd",
					Handler: user.ResetPwdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list/dept/:id",
					Handler: user.DeptListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: user.QueryPageUserListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: role.PageSetHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: role.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:code",
					Handler: role.RemoveHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: role.UpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: role.InfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/changeStatus",
					Handler: role.ChangeStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deptTree/:id",
					Handler: role.DeptTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/authUser/allocatedList",
					Handler: role.AllocatedListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/authUser/unallocatedList",
					Handler: role.UnAllocatedListHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/authUser/selectAll",
					Handler: role.SelectAllHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/authUser/cancelAll",
					Handler: role.CancelAllHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/authUser/cancel",
					Handler: role.CancelHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: dept.InfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: dept.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:code",
					Handler: dept.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: dept.UpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list/exclude/:id",
					Handler: dept.ExcludeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: dept.ListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/dept"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/treeselect",
					Handler: menu.TreeSelectHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/roleMenuTreeselect/:id",
					Handler: menu.RoleMenuTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/tenantPackageMenuTreeselect/:id",
					Handler: menu.TenantPackageTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/getRouters",
					Handler: menu.GetRoutersHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: menu.InfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: menu.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: menu.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: menu.UpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: menu.ListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/optionselect",
					Handler: _post.OptionSelectHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: _post.InfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: _post.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:code",
					Handler: _post.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: _post.UpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: _post.PageSetHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/post"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: notice.InfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: notice.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:ids",
					Handler: notice.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: notice.UpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: notice.PageSetHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/notice"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: client.InfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: client.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:ids",
					Handler: client.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/changeStatus",
					Handler: client.ChangeStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: client.UpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: client.PageSetHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/client"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: tenant.InfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: tenant.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:ids",
					Handler: tenant.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: tenant.UpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: tenant.PageSetHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/tenant"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: tenant_package.InfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: tenant_package.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:ids",
					Handler: tenant_package.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: tenant_package.UpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: tenant_package.PageSetHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/selectList",
					Handler: tenant_package.SelectListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/tenant/package"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/configKey/:code",
					Handler: _config.ConfigKeyHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: _config.InfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: _config.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:code",
					Handler: _config.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: _config.UpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: _config.PageSetHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/config"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/type/:code",
					Handler: dictdata.DataByTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: dictdata.InfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: dictdata.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:code",
					Handler: dictdata.DeleteDictDataHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: dictdata.UpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: dictdata.PageSetHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/dict/data"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: dict_type.InfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: dict_type.AddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/refreshCache",
					Handler: dict_type.RefreshCacheHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:code",
					Handler: dict_type.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: dict_type.UpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: dict_type.PageSetHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/system/dict/type"),
	)
}
