// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		ReportClassification:  newReportClassification(db, opts...),
		ReportDataReport:      newReportDataReport(db, opts...),
		ReportVisual:          newReportVisual(db, opts...),
		ReportVisualCategory:  newReportVisualCategory(db, opts...),
		ReportVisualComponent: newReportVisualComponent(db, opts...),
		ReportVisualConfig:    newReportVisualConfig(db, opts...),
		ReportVisualDb:        newReportVisualDb(db, opts...),
		ReportVisualMap:       newReportVisualMap(db, opts...),
		ReportVisualRecord:    newReportVisualRecord(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ReportClassification  reportClassification
	ReportDataReport      reportDataReport
	ReportVisual          reportVisual
	ReportVisualCategory  reportVisualCategory
	ReportVisualComponent reportVisualComponent
	ReportVisualConfig    reportVisualConfig
	ReportVisualDb        reportVisualDb
	ReportVisualMap       reportVisualMap
	ReportVisualRecord    reportVisualRecord
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		ReportClassification:  q.ReportClassification.clone(db),
		ReportDataReport:      q.ReportDataReport.clone(db),
		ReportVisual:          q.ReportVisual.clone(db),
		ReportVisualCategory:  q.ReportVisualCategory.clone(db),
		ReportVisualComponent: q.ReportVisualComponent.clone(db),
		ReportVisualConfig:    q.ReportVisualConfig.clone(db),
		ReportVisualDb:        q.ReportVisualDb.clone(db),
		ReportVisualMap:       q.ReportVisualMap.clone(db),
		ReportVisualRecord:    q.ReportVisualRecord.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		ReportClassification:  q.ReportClassification.replaceDB(db),
		ReportDataReport:      q.ReportDataReport.replaceDB(db),
		ReportVisual:          q.ReportVisual.replaceDB(db),
		ReportVisualCategory:  q.ReportVisualCategory.replaceDB(db),
		ReportVisualComponent: q.ReportVisualComponent.replaceDB(db),
		ReportVisualConfig:    q.ReportVisualConfig.replaceDB(db),
		ReportVisualDb:        q.ReportVisualDb.replaceDB(db),
		ReportVisualMap:       q.ReportVisualMap.replaceDB(db),
		ReportVisualRecord:    q.ReportVisualRecord.replaceDB(db),
	}
}

type queryCtx struct {
	ReportClassification  *reportClassificationDo
	ReportDataReport      *reportDataReportDo
	ReportVisual          *reportVisualDo
	ReportVisualCategory  *reportVisualCategoryDo
	ReportVisualComponent *reportVisualComponentDo
	ReportVisualConfig    *reportVisualConfigDo
	ReportVisualDb        *reportVisualDbDo
	ReportVisualMap       *reportVisualMapDo
	ReportVisualRecord    *reportVisualRecordDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ReportClassification:  q.ReportClassification.WithContext(ctx),
		ReportDataReport:      q.ReportDataReport.WithContext(ctx),
		ReportVisual:          q.ReportVisual.WithContext(ctx),
		ReportVisualCategory:  q.ReportVisualCategory.WithContext(ctx),
		ReportVisualComponent: q.ReportVisualComponent.WithContext(ctx),
		ReportVisualConfig:    q.ReportVisualConfig.WithContext(ctx),
		ReportVisualDb:        q.ReportVisualDb.WithContext(ctx),
		ReportVisualMap:       q.ReportVisualMap.WithContext(ctx),
		ReportVisualRecord:    q.ReportVisualRecord.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
