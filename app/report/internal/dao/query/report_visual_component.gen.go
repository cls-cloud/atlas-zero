// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"report/internal/dao/model"
)

func newReportVisualComponent(db *gorm.DB, opts ...gen.DOOption) reportVisualComponent {
	_reportVisualComponent := reportVisualComponent{}

	_reportVisualComponent.reportVisualComponentDo.UseDB(db, opts...)
	_reportVisualComponent.reportVisualComponentDo.UseModel(&model.ReportVisualComponent{})

	tableName := _reportVisualComponent.reportVisualComponentDo.TableName()
	_reportVisualComponent.ALL = field.NewAsterisk(tableName)
	_reportVisualComponent.UUID = field.NewString(tableName, "uuid")
	_reportVisualComponent.CreatorID = field.NewString(tableName, "creator_id")
	_reportVisualComponent.Creator = field.NewString(tableName, "creator")
	_reportVisualComponent.CreateTime = field.NewTime(tableName, "create_time")
	_reportVisualComponent.ModifierID = field.NewString(tableName, "modifier_id")
	_reportVisualComponent.Modifier = field.NewString(tableName, "modifier")
	_reportVisualComponent.ModifyTime = field.NewTime(tableName, "modify_time")
	_reportVisualComponent.CreatorOrgID = field.NewInt32(tableName, "creator_org_id")
	_reportVisualComponent.TenantUUID = field.NewString(tableName, "tenant_uuid")
	_reportVisualComponent.Name = field.NewString(tableName, "name")
	_reportVisualComponent.Content = field.NewString(tableName, "content")

	_reportVisualComponent.fillFieldMap()

	return _reportVisualComponent
}

// reportVisualComponent 大屏可视化组件
type reportVisualComponent struct {
	reportVisualComponentDo reportVisualComponentDo

	ALL          field.Asterisk
	UUID         field.String // 主键
	CreatorID    field.String // 创建人id
	Creator      field.String // 创建人
	CreateTime   field.Time   // 创建人姓名
	ModifierID   field.String // 修改人id
	Modifier     field.String // 修改人
	ModifyTime   field.Time   // 修改时间
	CreatorOrgID field.Int32  // 创建人组织结构id
	TenantUUID   field.String // 租户UUID
	Name         field.String // 组件名称
	Content      field.String // 组件内容

	fieldMap map[string]field.Expr
}

func (r reportVisualComponent) Table(newTableName string) *reportVisualComponent {
	r.reportVisualComponentDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reportVisualComponent) As(alias string) *reportVisualComponent {
	r.reportVisualComponentDo.DO = *(r.reportVisualComponentDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reportVisualComponent) updateTableName(table string) *reportVisualComponent {
	r.ALL = field.NewAsterisk(table)
	r.UUID = field.NewString(table, "uuid")
	r.CreatorID = field.NewString(table, "creator_id")
	r.Creator = field.NewString(table, "creator")
	r.CreateTime = field.NewTime(table, "create_time")
	r.ModifierID = field.NewString(table, "modifier_id")
	r.Modifier = field.NewString(table, "modifier")
	r.ModifyTime = field.NewTime(table, "modify_time")
	r.CreatorOrgID = field.NewInt32(table, "creator_org_id")
	r.TenantUUID = field.NewString(table, "tenant_uuid")
	r.Name = field.NewString(table, "name")
	r.Content = field.NewString(table, "content")

	r.fillFieldMap()

	return r
}

func (r *reportVisualComponent) WithContext(ctx context.Context) *reportVisualComponentDo {
	return r.reportVisualComponentDo.WithContext(ctx)
}

func (r reportVisualComponent) TableName() string { return r.reportVisualComponentDo.TableName() }

func (r reportVisualComponent) Alias() string { return r.reportVisualComponentDo.Alias() }

func (r reportVisualComponent) Columns(cols ...field.Expr) gen.Columns {
	return r.reportVisualComponentDo.Columns(cols...)
}

func (r *reportVisualComponent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reportVisualComponent) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 11)
	r.fieldMap["uuid"] = r.UUID
	r.fieldMap["creator_id"] = r.CreatorID
	r.fieldMap["creator"] = r.Creator
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["modifier_id"] = r.ModifierID
	r.fieldMap["modifier"] = r.Modifier
	r.fieldMap["modify_time"] = r.ModifyTime
	r.fieldMap["creator_org_id"] = r.CreatorOrgID
	r.fieldMap["tenant_uuid"] = r.TenantUUID
	r.fieldMap["name"] = r.Name
	r.fieldMap["content"] = r.Content
}

func (r reportVisualComponent) clone(db *gorm.DB) reportVisualComponent {
	r.reportVisualComponentDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reportVisualComponent) replaceDB(db *gorm.DB) reportVisualComponent {
	r.reportVisualComponentDo.ReplaceDB(db)
	return r
}

type reportVisualComponentDo struct{ gen.DO }

func (r reportVisualComponentDo) Debug() *reportVisualComponentDo {
	return r.withDO(r.DO.Debug())
}

func (r reportVisualComponentDo) WithContext(ctx context.Context) *reportVisualComponentDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportVisualComponentDo) ReadDB() *reportVisualComponentDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportVisualComponentDo) WriteDB() *reportVisualComponentDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportVisualComponentDo) Session(config *gorm.Session) *reportVisualComponentDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportVisualComponentDo) Clauses(conds ...clause.Expression) *reportVisualComponentDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportVisualComponentDo) Returning(value interface{}, columns ...string) *reportVisualComponentDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportVisualComponentDo) Not(conds ...gen.Condition) *reportVisualComponentDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportVisualComponentDo) Or(conds ...gen.Condition) *reportVisualComponentDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportVisualComponentDo) Select(conds ...field.Expr) *reportVisualComponentDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportVisualComponentDo) Where(conds ...gen.Condition) *reportVisualComponentDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportVisualComponentDo) Order(conds ...field.Expr) *reportVisualComponentDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportVisualComponentDo) Distinct(cols ...field.Expr) *reportVisualComponentDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportVisualComponentDo) Omit(cols ...field.Expr) *reportVisualComponentDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportVisualComponentDo) Join(table schema.Tabler, on ...field.Expr) *reportVisualComponentDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportVisualComponentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *reportVisualComponentDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportVisualComponentDo) RightJoin(table schema.Tabler, on ...field.Expr) *reportVisualComponentDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportVisualComponentDo) Group(cols ...field.Expr) *reportVisualComponentDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportVisualComponentDo) Having(conds ...gen.Condition) *reportVisualComponentDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportVisualComponentDo) Limit(limit int) *reportVisualComponentDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportVisualComponentDo) Offset(offset int) *reportVisualComponentDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportVisualComponentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *reportVisualComponentDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportVisualComponentDo) Unscoped() *reportVisualComponentDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportVisualComponentDo) Create(values ...*model.ReportVisualComponent) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportVisualComponentDo) CreateInBatches(values []*model.ReportVisualComponent, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportVisualComponentDo) Save(values ...*model.ReportVisualComponent) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportVisualComponentDo) First() (*model.ReportVisualComponent, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualComponent), nil
	}
}

func (r reportVisualComponentDo) Take() (*model.ReportVisualComponent, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualComponent), nil
	}
}

func (r reportVisualComponentDo) Last() (*model.ReportVisualComponent, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualComponent), nil
	}
}

func (r reportVisualComponentDo) Find() ([]*model.ReportVisualComponent, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReportVisualComponent), err
}

func (r reportVisualComponentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportVisualComponent, err error) {
	buf := make([]*model.ReportVisualComponent, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportVisualComponentDo) FindInBatches(result *[]*model.ReportVisualComponent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportVisualComponentDo) Attrs(attrs ...field.AssignExpr) *reportVisualComponentDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportVisualComponentDo) Assign(attrs ...field.AssignExpr) *reportVisualComponentDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportVisualComponentDo) Joins(fields ...field.RelationField) *reportVisualComponentDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportVisualComponentDo) Preload(fields ...field.RelationField) *reportVisualComponentDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportVisualComponentDo) FirstOrInit() (*model.ReportVisualComponent, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualComponent), nil
	}
}

func (r reportVisualComponentDo) FirstOrCreate() (*model.ReportVisualComponent, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualComponent), nil
	}
}

func (r reportVisualComponentDo) FindByPage(offset int, limit int) (result []*model.ReportVisualComponent, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportVisualComponentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportVisualComponentDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportVisualComponentDo) Delete(models ...*model.ReportVisualComponent) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportVisualComponentDo) withDO(do gen.Dao) *reportVisualComponentDo {
	r.DO = *do.(*gen.DO)
	return r
}
