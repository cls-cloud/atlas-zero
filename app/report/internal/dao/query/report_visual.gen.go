// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"report/internal/dao/model"
)

func newReportVisual(db *gorm.DB, opts ...gen.DOOption) reportVisual {
	_reportVisual := reportVisual{}

	_reportVisual.reportVisualDo.UseDB(db, opts...)
	_reportVisual.reportVisualDo.UseModel(&model.ReportVisual{})

	tableName := _reportVisual.reportVisualDo.TableName()
	_reportVisual.ALL = field.NewAsterisk(tableName)
	_reportVisual.UUID = field.NewString(tableName, "uuid")
	_reportVisual.Title = field.NewString(tableName, "title")
	_reportVisual.BackgroundURL = field.NewString(tableName, "background_url")
	_reportVisual.Category = field.NewString(tableName, "category")
	_reportVisual.Password = field.NewString(tableName, "password")
	_reportVisual.CreateUser = field.NewInt64(tableName, "create_user")
	_reportVisual.CreateDept = field.NewInt64(tableName, "create_dept")
	_reportVisual.CreateTime = field.NewTime(tableName, "create_time")
	_reportVisual.UpdateUser = field.NewInt64(tableName, "update_user")
	_reportVisual.UpdateTime = field.NewTime(tableName, "update_time")
	_reportVisual.Status = field.NewInt32(tableName, "status")
	_reportVisual.IsDeleted = field.NewInt32(tableName, "is_deleted")
	_reportVisual.CreatorID = field.NewString(tableName, "creator_id")
	_reportVisual.Creator = field.NewString(tableName, "creator")
	_reportVisual.ModifierID = field.NewString(tableName, "modifier_id")
	_reportVisual.Modifier = field.NewString(tableName, "modifier")
	_reportVisual.ModifyTime = field.NewTime(tableName, "modify_time")
	_reportVisual.CreatorOrgID = field.NewInt32(tableName, "creator_org_id")
	_reportVisual.TenantUUID = field.NewString(tableName, "tenant_uuid")

	_reportVisual.fillFieldMap()

	return _reportVisual
}

// reportVisual 可视化主表表
type reportVisual struct {
	reportVisualDo reportVisualDo

	ALL           field.Asterisk
	UUID          field.String // 主键
	Title         field.String // 大屏标题
	BackgroundURL field.String // 大屏背景
	Category      field.String // 大屏类型
	Password      field.String // 发布密码
	CreateUser    field.Int64  // 创建人
	CreateDept    field.Int64  // 创建部门
	CreateTime    field.Time   // 创建时间
	UpdateUser    field.Int64  // 修改人
	UpdateTime    field.Time   // 修改时间
	Status        field.Int32  // 状态
	IsDeleted     field.Int32  // 是否已删除
	CreatorID     field.String // 创建人ID
	Creator       field.String // 创建人
	ModifierID    field.String // 修改人Id
	Modifier      field.String // 修改人
	ModifyTime    field.Time   // 修改时间
	CreatorOrgID  field.Int32  // 创建人组织机构ID
	TenantUUID    field.String // 租户UUID

	fieldMap map[string]field.Expr
}

func (r reportVisual) Table(newTableName string) *reportVisual {
	r.reportVisualDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reportVisual) As(alias string) *reportVisual {
	r.reportVisualDo.DO = *(r.reportVisualDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reportVisual) updateTableName(table string) *reportVisual {
	r.ALL = field.NewAsterisk(table)
	r.UUID = field.NewString(table, "uuid")
	r.Title = field.NewString(table, "title")
	r.BackgroundURL = field.NewString(table, "background_url")
	r.Category = field.NewString(table, "category")
	r.Password = field.NewString(table, "password")
	r.CreateUser = field.NewInt64(table, "create_user")
	r.CreateDept = field.NewInt64(table, "create_dept")
	r.CreateTime = field.NewTime(table, "create_time")
	r.UpdateUser = field.NewInt64(table, "update_user")
	r.UpdateTime = field.NewTime(table, "update_time")
	r.Status = field.NewInt32(table, "status")
	r.IsDeleted = field.NewInt32(table, "is_deleted")
	r.CreatorID = field.NewString(table, "creator_id")
	r.Creator = field.NewString(table, "creator")
	r.ModifierID = field.NewString(table, "modifier_id")
	r.Modifier = field.NewString(table, "modifier")
	r.ModifyTime = field.NewTime(table, "modify_time")
	r.CreatorOrgID = field.NewInt32(table, "creator_org_id")
	r.TenantUUID = field.NewString(table, "tenant_uuid")

	r.fillFieldMap()

	return r
}

func (r *reportVisual) WithContext(ctx context.Context) *reportVisualDo {
	return r.reportVisualDo.WithContext(ctx)
}

func (r reportVisual) TableName() string { return r.reportVisualDo.TableName() }

func (r reportVisual) Alias() string { return r.reportVisualDo.Alias() }

func (r reportVisual) Columns(cols ...field.Expr) gen.Columns {
	return r.reportVisualDo.Columns(cols...)
}

func (r *reportVisual) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reportVisual) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 19)
	r.fieldMap["uuid"] = r.UUID
	r.fieldMap["title"] = r.Title
	r.fieldMap["background_url"] = r.BackgroundURL
	r.fieldMap["category"] = r.Category
	r.fieldMap["password"] = r.Password
	r.fieldMap["create_user"] = r.CreateUser
	r.fieldMap["create_dept"] = r.CreateDept
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["update_user"] = r.UpdateUser
	r.fieldMap["update_time"] = r.UpdateTime
	r.fieldMap["status"] = r.Status
	r.fieldMap["is_deleted"] = r.IsDeleted
	r.fieldMap["creator_id"] = r.CreatorID
	r.fieldMap["creator"] = r.Creator
	r.fieldMap["modifier_id"] = r.ModifierID
	r.fieldMap["modifier"] = r.Modifier
	r.fieldMap["modify_time"] = r.ModifyTime
	r.fieldMap["creator_org_id"] = r.CreatorOrgID
	r.fieldMap["tenant_uuid"] = r.TenantUUID
}

func (r reportVisual) clone(db *gorm.DB) reportVisual {
	r.reportVisualDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reportVisual) replaceDB(db *gorm.DB) reportVisual {
	r.reportVisualDo.ReplaceDB(db)
	return r
}

type reportVisualDo struct{ gen.DO }

func (r reportVisualDo) Debug() *reportVisualDo {
	return r.withDO(r.DO.Debug())
}

func (r reportVisualDo) WithContext(ctx context.Context) *reportVisualDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportVisualDo) ReadDB() *reportVisualDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportVisualDo) WriteDB() *reportVisualDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportVisualDo) Session(config *gorm.Session) *reportVisualDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportVisualDo) Clauses(conds ...clause.Expression) *reportVisualDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportVisualDo) Returning(value interface{}, columns ...string) *reportVisualDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportVisualDo) Not(conds ...gen.Condition) *reportVisualDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportVisualDo) Or(conds ...gen.Condition) *reportVisualDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportVisualDo) Select(conds ...field.Expr) *reportVisualDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportVisualDo) Where(conds ...gen.Condition) *reportVisualDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportVisualDo) Order(conds ...field.Expr) *reportVisualDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportVisualDo) Distinct(cols ...field.Expr) *reportVisualDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportVisualDo) Omit(cols ...field.Expr) *reportVisualDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportVisualDo) Join(table schema.Tabler, on ...field.Expr) *reportVisualDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportVisualDo) LeftJoin(table schema.Tabler, on ...field.Expr) *reportVisualDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportVisualDo) RightJoin(table schema.Tabler, on ...field.Expr) *reportVisualDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportVisualDo) Group(cols ...field.Expr) *reportVisualDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportVisualDo) Having(conds ...gen.Condition) *reportVisualDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportVisualDo) Limit(limit int) *reportVisualDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportVisualDo) Offset(offset int) *reportVisualDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportVisualDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *reportVisualDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportVisualDo) Unscoped() *reportVisualDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportVisualDo) Create(values ...*model.ReportVisual) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportVisualDo) CreateInBatches(values []*model.ReportVisual, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportVisualDo) Save(values ...*model.ReportVisual) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportVisualDo) First() (*model.ReportVisual, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisual), nil
	}
}

func (r reportVisualDo) Take() (*model.ReportVisual, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisual), nil
	}
}

func (r reportVisualDo) Last() (*model.ReportVisual, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisual), nil
	}
}

func (r reportVisualDo) Find() ([]*model.ReportVisual, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReportVisual), err
}

func (r reportVisualDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportVisual, err error) {
	buf := make([]*model.ReportVisual, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportVisualDo) FindInBatches(result *[]*model.ReportVisual, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportVisualDo) Attrs(attrs ...field.AssignExpr) *reportVisualDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportVisualDo) Assign(attrs ...field.AssignExpr) *reportVisualDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportVisualDo) Joins(fields ...field.RelationField) *reportVisualDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportVisualDo) Preload(fields ...field.RelationField) *reportVisualDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportVisualDo) FirstOrInit() (*model.ReportVisual, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisual), nil
	}
}

func (r reportVisualDo) FirstOrCreate() (*model.ReportVisual, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisual), nil
	}
}

func (r reportVisualDo) FindByPage(offset int, limit int) (result []*model.ReportVisual, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportVisualDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportVisualDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportVisualDo) Delete(models ...*model.ReportVisual) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportVisualDo) withDO(do gen.Dao) *reportVisualDo {
	r.DO = *do.(*gen.DO)
	return r
}
