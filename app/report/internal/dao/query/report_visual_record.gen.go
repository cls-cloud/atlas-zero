// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"report/internal/dao/model"
)

func newReportVisualRecord(db *gorm.DB, opts ...gen.DOOption) reportVisualRecord {
	_reportVisualRecord := reportVisualRecord{}

	_reportVisualRecord.reportVisualRecordDo.UseDB(db, opts...)
	_reportVisualRecord.reportVisualRecordDo.UseModel(&model.ReportVisualRecord{})

	tableName := _reportVisualRecord.reportVisualRecordDo.TableName()
	_reportVisualRecord.ALL = field.NewAsterisk(tableName)
	_reportVisualRecord.UUID = field.NewString(tableName, "uuid")
	_reportVisualRecord.CreatorID = field.NewString(tableName, "creator_id")
	_reportVisualRecord.Creator = field.NewString(tableName, "creator")
	_reportVisualRecord.CreateTime = field.NewTime(tableName, "create_time")
	_reportVisualRecord.ModifierID = field.NewString(tableName, "modifier_id")
	_reportVisualRecord.Modifier = field.NewString(tableName, "modifier")
	_reportVisualRecord.ModifyTime = field.NewTime(tableName, "modify_time")
	_reportVisualRecord.CreatorOrgID = field.NewInt32(tableName, "creator_org_id")
	_reportVisualRecord.TenantUUID = field.NewString(tableName, "tenant_uuid")
	_reportVisualRecord.ID = field.NewInt32(tableName, "id")
	_reportVisualRecord.Name = field.NewString(tableName, "name")
	_reportVisualRecord.URL = field.NewString(tableName, "url")
	_reportVisualRecord.DataType = field.NewInt32(tableName, "data_type")
	_reportVisualRecord.DataMethod = field.NewString(tableName, "data_method")
	_reportVisualRecord.Data = field.NewString(tableName, "data")
	_reportVisualRecord.DataQuery = field.NewString(tableName, "data_query")
	_reportVisualRecord.DataQueryType = field.NewString(tableName, "data_query_type")
	_reportVisualRecord.DataFormatter = field.NewString(tableName, "data_formatter")
	_reportVisualRecord.WsURL = field.NewString(tableName, "ws_url")
	_reportVisualRecord.DataHeader = field.NewString(tableName, "data_header")
	_reportVisualRecord.DbUUID = field.NewString(tableName, "db_uuid")
	_reportVisualRecord.DbSql = field.NewString(tableName, "db_sql")

	_reportVisualRecord.fillFieldMap()

	return _reportVisualRecord
}

// reportVisualRecord 可视化大屏数据集
type reportVisualRecord struct {
	reportVisualRecordDo reportVisualRecordDo

	ALL           field.Asterisk
	UUID          field.String // 主键
	CreatorID     field.String // 创建人id
	Creator       field.String // 创建人
	CreateTime    field.Time   // 创建时间
	ModifierID    field.String // 修改人id
	Modifier      field.String // 修改人
	ModifyTime    field.Time   // 修改时间
	CreatorOrgID  field.Int32  // 创建人组织结构id
	TenantUUID    field.String // 租户UUID
	ID            field.Int32  // id
	Name          field.String // 名称
	URL           field.String // 地址
	DataType      field.Int32  // 请求类型
	DataMethod    field.String // 请求方式
	Data          field.String // 数据
	DataQuery     field.String // 请求查询数据
	DataQueryType field.String // 查询类型
	DataFormatter field.String // 数据格式化
	WsURL         field.String // websocket地址
	DataHeader    field.String // 请求头参数
	DbUUID        field.String // 数据库连接UUID
	DbSql         field.String // SQL语句

	fieldMap map[string]field.Expr
}

func (r reportVisualRecord) Table(newTableName string) *reportVisualRecord {
	r.reportVisualRecordDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reportVisualRecord) As(alias string) *reportVisualRecord {
	r.reportVisualRecordDo.DO = *(r.reportVisualRecordDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reportVisualRecord) updateTableName(table string) *reportVisualRecord {
	r.ALL = field.NewAsterisk(table)
	r.UUID = field.NewString(table, "uuid")
	r.CreatorID = field.NewString(table, "creator_id")
	r.Creator = field.NewString(table, "creator")
	r.CreateTime = field.NewTime(table, "create_time")
	r.ModifierID = field.NewString(table, "modifier_id")
	r.Modifier = field.NewString(table, "modifier")
	r.ModifyTime = field.NewTime(table, "modify_time")
	r.CreatorOrgID = field.NewInt32(table, "creator_org_id")
	r.TenantUUID = field.NewString(table, "tenant_uuid")
	r.ID = field.NewInt32(table, "id")
	r.Name = field.NewString(table, "name")
	r.URL = field.NewString(table, "url")
	r.DataType = field.NewInt32(table, "data_type")
	r.DataMethod = field.NewString(table, "data_method")
	r.Data = field.NewString(table, "data")
	r.DataQuery = field.NewString(table, "data_query")
	r.DataQueryType = field.NewString(table, "data_query_type")
	r.DataFormatter = field.NewString(table, "data_formatter")
	r.WsURL = field.NewString(table, "ws_url")
	r.DataHeader = field.NewString(table, "data_header")
	r.DbUUID = field.NewString(table, "db_uuid")
	r.DbSql = field.NewString(table, "db_sql")

	r.fillFieldMap()

	return r
}

func (r *reportVisualRecord) WithContext(ctx context.Context) *reportVisualRecordDo {
	return r.reportVisualRecordDo.WithContext(ctx)
}

func (r reportVisualRecord) TableName() string { return r.reportVisualRecordDo.TableName() }

func (r reportVisualRecord) Alias() string { return r.reportVisualRecordDo.Alias() }

func (r reportVisualRecord) Columns(cols ...field.Expr) gen.Columns {
	return r.reportVisualRecordDo.Columns(cols...)
}

func (r *reportVisualRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reportVisualRecord) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 22)
	r.fieldMap["uuid"] = r.UUID
	r.fieldMap["creator_id"] = r.CreatorID
	r.fieldMap["creator"] = r.Creator
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["modifier_id"] = r.ModifierID
	r.fieldMap["modifier"] = r.Modifier
	r.fieldMap["modify_time"] = r.ModifyTime
	r.fieldMap["creator_org_id"] = r.CreatorOrgID
	r.fieldMap["tenant_uuid"] = r.TenantUUID
	r.fieldMap["id"] = r.ID
	r.fieldMap["name"] = r.Name
	r.fieldMap["url"] = r.URL
	r.fieldMap["data_type"] = r.DataType
	r.fieldMap["data_method"] = r.DataMethod
	r.fieldMap["data"] = r.Data
	r.fieldMap["data_query"] = r.DataQuery
	r.fieldMap["data_query_type"] = r.DataQueryType
	r.fieldMap["data_formatter"] = r.DataFormatter
	r.fieldMap["ws_url"] = r.WsURL
	r.fieldMap["data_header"] = r.DataHeader
	r.fieldMap["db_uuid"] = r.DbUUID
	r.fieldMap["db_sql"] = r.DbSql
}

func (r reportVisualRecord) clone(db *gorm.DB) reportVisualRecord {
	r.reportVisualRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reportVisualRecord) replaceDB(db *gorm.DB) reportVisualRecord {
	r.reportVisualRecordDo.ReplaceDB(db)
	return r
}

type reportVisualRecordDo struct{ gen.DO }

func (r reportVisualRecordDo) Debug() *reportVisualRecordDo {
	return r.withDO(r.DO.Debug())
}

func (r reportVisualRecordDo) WithContext(ctx context.Context) *reportVisualRecordDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportVisualRecordDo) ReadDB() *reportVisualRecordDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportVisualRecordDo) WriteDB() *reportVisualRecordDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportVisualRecordDo) Session(config *gorm.Session) *reportVisualRecordDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportVisualRecordDo) Clauses(conds ...clause.Expression) *reportVisualRecordDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportVisualRecordDo) Returning(value interface{}, columns ...string) *reportVisualRecordDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportVisualRecordDo) Not(conds ...gen.Condition) *reportVisualRecordDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportVisualRecordDo) Or(conds ...gen.Condition) *reportVisualRecordDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportVisualRecordDo) Select(conds ...field.Expr) *reportVisualRecordDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportVisualRecordDo) Where(conds ...gen.Condition) *reportVisualRecordDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportVisualRecordDo) Order(conds ...field.Expr) *reportVisualRecordDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportVisualRecordDo) Distinct(cols ...field.Expr) *reportVisualRecordDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportVisualRecordDo) Omit(cols ...field.Expr) *reportVisualRecordDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportVisualRecordDo) Join(table schema.Tabler, on ...field.Expr) *reportVisualRecordDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportVisualRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *reportVisualRecordDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportVisualRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *reportVisualRecordDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportVisualRecordDo) Group(cols ...field.Expr) *reportVisualRecordDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportVisualRecordDo) Having(conds ...gen.Condition) *reportVisualRecordDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportVisualRecordDo) Limit(limit int) *reportVisualRecordDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportVisualRecordDo) Offset(offset int) *reportVisualRecordDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportVisualRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *reportVisualRecordDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportVisualRecordDo) Unscoped() *reportVisualRecordDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportVisualRecordDo) Create(values ...*model.ReportVisualRecord) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportVisualRecordDo) CreateInBatches(values []*model.ReportVisualRecord, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportVisualRecordDo) Save(values ...*model.ReportVisualRecord) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportVisualRecordDo) First() (*model.ReportVisualRecord, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualRecord), nil
	}
}

func (r reportVisualRecordDo) Take() (*model.ReportVisualRecord, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualRecord), nil
	}
}

func (r reportVisualRecordDo) Last() (*model.ReportVisualRecord, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualRecord), nil
	}
}

func (r reportVisualRecordDo) Find() ([]*model.ReportVisualRecord, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReportVisualRecord), err
}

func (r reportVisualRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportVisualRecord, err error) {
	buf := make([]*model.ReportVisualRecord, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportVisualRecordDo) FindInBatches(result *[]*model.ReportVisualRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportVisualRecordDo) Attrs(attrs ...field.AssignExpr) *reportVisualRecordDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportVisualRecordDo) Assign(attrs ...field.AssignExpr) *reportVisualRecordDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportVisualRecordDo) Joins(fields ...field.RelationField) *reportVisualRecordDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportVisualRecordDo) Preload(fields ...field.RelationField) *reportVisualRecordDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportVisualRecordDo) FirstOrInit() (*model.ReportVisualRecord, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualRecord), nil
	}
}

func (r reportVisualRecordDo) FirstOrCreate() (*model.ReportVisualRecord, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualRecord), nil
	}
}

func (r reportVisualRecordDo) FindByPage(offset int, limit int) (result []*model.ReportVisualRecord, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportVisualRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportVisualRecordDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportVisualRecordDo) Delete(models ...*model.ReportVisualRecord) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportVisualRecordDo) withDO(do gen.Dao) *reportVisualRecordDo {
	r.DO = *do.(*gen.DO)
	return r
}
