// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"report/internal/dao/model"
)

func newReportDataReport(db *gorm.DB, opts ...gen.DOOption) reportDataReport {
	_reportDataReport := reportDataReport{}

	_reportDataReport.reportDataReportDo.UseDB(db, opts...)
	_reportDataReport.reportDataReportDo.UseModel(&model.ReportDataReport{})

	tableName := _reportDataReport.reportDataReportDo.TableName()
	_reportDataReport.ALL = field.NewAsterisk(tableName)
	_reportDataReport.UUID = field.NewString(tableName, "uuid")
	_reportDataReport.CreatorID = field.NewString(tableName, "creator_id")
	_reportDataReport.Creator = field.NewString(tableName, "creator")
	_reportDataReport.CreateTime = field.NewTime(tableName, "create_time")
	_reportDataReport.ModifierID = field.NewString(tableName, "modifier_id")
	_reportDataReport.Modifier = field.NewString(tableName, "modifier")
	_reportDataReport.ModifyTime = field.NewTime(tableName, "modify_time")
	_reportDataReport.TenantUUID = field.NewString(tableName, "tenant_uuid")
	_reportDataReport.DataReportName = field.NewString(tableName, "data_report_name")
	_reportDataReport.DataReportContent = field.NewBytes(tableName, "data_report_content")
	_reportDataReport.DataReportContentXML = field.NewString(tableName, "data_report_content_xml")
	_reportDataReport.CompanyID = field.NewInt32(tableName, "company_id")
	_reportDataReport.DataReportCode = field.NewString(tableName, "data_report_code")
	_reportDataReport.DataReportType = field.NewString(tableName, "data_report_type")
	_reportDataReport.DataReportSort = field.NewInt32(tableName, "data_report_sort")
	_reportDataReport.DataReportDesc = field.NewString(tableName, "data_report_desc")
	_reportDataReport.CreatorOrgID = field.NewInt32(tableName, "creator_org_id")
	_reportDataReport.DataReportStatus = field.NewString(tableName, "data_report_status")
	_reportDataReport.DataReportImg = field.NewString(tableName, "data_report_img")

	_reportDataReport.fillFieldMap()

	return _reportDataReport
}

// reportDataReport 数据报表管理表
type reportDataReport struct {
	reportDataReportDo reportDataReportDo

	ALL                  field.Asterisk
	UUID                 field.String // 主键
	CreatorID            field.String // 创建人Id
	Creator              field.String // 创建人
	CreateTime           field.Time   // 创建时间
	ModifierID           field.String // 修改人Id
	Modifier             field.String // 修改人
	ModifyTime           field.Time   // 修改时间
	TenantUUID           field.String // 租户UUID
	DataReportName       field.String // 报表名称
	DataReportContent    field.Bytes  // 报表流数据
	DataReportContentXML field.String // 报表xml数据
	CompanyID            field.Int32  // 公司Id
	DataReportCode       field.String // 编码
	DataReportType       field.String // 类型
	DataReportSort       field.Int32  // 排序
	DataReportDesc       field.String // 描述
	CreatorOrgID         field.Int32  // 创建人组织机构ID
	DataReportStatus     field.String // 预留字段——状态(是否走回收站)
	DataReportImg        field.String // 预留字段——报表背景

	fieldMap map[string]field.Expr
}

func (r reportDataReport) Table(newTableName string) *reportDataReport {
	r.reportDataReportDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reportDataReport) As(alias string) *reportDataReport {
	r.reportDataReportDo.DO = *(r.reportDataReportDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reportDataReport) updateTableName(table string) *reportDataReport {
	r.ALL = field.NewAsterisk(table)
	r.UUID = field.NewString(table, "uuid")
	r.CreatorID = field.NewString(table, "creator_id")
	r.Creator = field.NewString(table, "creator")
	r.CreateTime = field.NewTime(table, "create_time")
	r.ModifierID = field.NewString(table, "modifier_id")
	r.Modifier = field.NewString(table, "modifier")
	r.ModifyTime = field.NewTime(table, "modify_time")
	r.TenantUUID = field.NewString(table, "tenant_uuid")
	r.DataReportName = field.NewString(table, "data_report_name")
	r.DataReportContent = field.NewBytes(table, "data_report_content")
	r.DataReportContentXML = field.NewString(table, "data_report_content_xml")
	r.CompanyID = field.NewInt32(table, "company_id")
	r.DataReportCode = field.NewString(table, "data_report_code")
	r.DataReportType = field.NewString(table, "data_report_type")
	r.DataReportSort = field.NewInt32(table, "data_report_sort")
	r.DataReportDesc = field.NewString(table, "data_report_desc")
	r.CreatorOrgID = field.NewInt32(table, "creator_org_id")
	r.DataReportStatus = field.NewString(table, "data_report_status")
	r.DataReportImg = field.NewString(table, "data_report_img")

	r.fillFieldMap()

	return r
}

func (r *reportDataReport) WithContext(ctx context.Context) *reportDataReportDo {
	return r.reportDataReportDo.WithContext(ctx)
}

func (r reportDataReport) TableName() string { return r.reportDataReportDo.TableName() }

func (r reportDataReport) Alias() string { return r.reportDataReportDo.Alias() }

func (r reportDataReport) Columns(cols ...field.Expr) gen.Columns {
	return r.reportDataReportDo.Columns(cols...)
}

func (r *reportDataReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reportDataReport) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 19)
	r.fieldMap["uuid"] = r.UUID
	r.fieldMap["creator_id"] = r.CreatorID
	r.fieldMap["creator"] = r.Creator
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["modifier_id"] = r.ModifierID
	r.fieldMap["modifier"] = r.Modifier
	r.fieldMap["modify_time"] = r.ModifyTime
	r.fieldMap["tenant_uuid"] = r.TenantUUID
	r.fieldMap["data_report_name"] = r.DataReportName
	r.fieldMap["data_report_content"] = r.DataReportContent
	r.fieldMap["data_report_content_xml"] = r.DataReportContentXML
	r.fieldMap["company_id"] = r.CompanyID
	r.fieldMap["data_report_code"] = r.DataReportCode
	r.fieldMap["data_report_type"] = r.DataReportType
	r.fieldMap["data_report_sort"] = r.DataReportSort
	r.fieldMap["data_report_desc"] = r.DataReportDesc
	r.fieldMap["creator_org_id"] = r.CreatorOrgID
	r.fieldMap["data_report_status"] = r.DataReportStatus
	r.fieldMap["data_report_img"] = r.DataReportImg
}

func (r reportDataReport) clone(db *gorm.DB) reportDataReport {
	r.reportDataReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reportDataReport) replaceDB(db *gorm.DB) reportDataReport {
	r.reportDataReportDo.ReplaceDB(db)
	return r
}

type reportDataReportDo struct{ gen.DO }

func (r reportDataReportDo) Debug() *reportDataReportDo {
	return r.withDO(r.DO.Debug())
}

func (r reportDataReportDo) WithContext(ctx context.Context) *reportDataReportDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportDataReportDo) ReadDB() *reportDataReportDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportDataReportDo) WriteDB() *reportDataReportDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportDataReportDo) Session(config *gorm.Session) *reportDataReportDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportDataReportDo) Clauses(conds ...clause.Expression) *reportDataReportDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportDataReportDo) Returning(value interface{}, columns ...string) *reportDataReportDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportDataReportDo) Not(conds ...gen.Condition) *reportDataReportDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportDataReportDo) Or(conds ...gen.Condition) *reportDataReportDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportDataReportDo) Select(conds ...field.Expr) *reportDataReportDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportDataReportDo) Where(conds ...gen.Condition) *reportDataReportDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportDataReportDo) Order(conds ...field.Expr) *reportDataReportDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportDataReportDo) Distinct(cols ...field.Expr) *reportDataReportDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportDataReportDo) Omit(cols ...field.Expr) *reportDataReportDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportDataReportDo) Join(table schema.Tabler, on ...field.Expr) *reportDataReportDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportDataReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *reportDataReportDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportDataReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *reportDataReportDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportDataReportDo) Group(cols ...field.Expr) *reportDataReportDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportDataReportDo) Having(conds ...gen.Condition) *reportDataReportDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportDataReportDo) Limit(limit int) *reportDataReportDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportDataReportDo) Offset(offset int) *reportDataReportDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportDataReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *reportDataReportDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportDataReportDo) Unscoped() *reportDataReportDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportDataReportDo) Create(values ...*model.ReportDataReport) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportDataReportDo) CreateInBatches(values []*model.ReportDataReport, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportDataReportDo) Save(values ...*model.ReportDataReport) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportDataReportDo) First() (*model.ReportDataReport, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportDataReport), nil
	}
}

func (r reportDataReportDo) Take() (*model.ReportDataReport, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportDataReport), nil
	}
}

func (r reportDataReportDo) Last() (*model.ReportDataReport, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportDataReport), nil
	}
}

func (r reportDataReportDo) Find() ([]*model.ReportDataReport, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReportDataReport), err
}

func (r reportDataReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportDataReport, err error) {
	buf := make([]*model.ReportDataReport, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportDataReportDo) FindInBatches(result *[]*model.ReportDataReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportDataReportDo) Attrs(attrs ...field.AssignExpr) *reportDataReportDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportDataReportDo) Assign(attrs ...field.AssignExpr) *reportDataReportDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportDataReportDo) Joins(fields ...field.RelationField) *reportDataReportDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportDataReportDo) Preload(fields ...field.RelationField) *reportDataReportDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportDataReportDo) FirstOrInit() (*model.ReportDataReport, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportDataReport), nil
	}
}

func (r reportDataReportDo) FirstOrCreate() (*model.ReportDataReport, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportDataReport), nil
	}
}

func (r reportDataReportDo) FindByPage(offset int, limit int) (result []*model.ReportDataReport, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportDataReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportDataReportDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportDataReportDo) Delete(models ...*model.ReportDataReport) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportDataReportDo) withDO(do gen.Dao) *reportDataReportDo {
	r.DO = *do.(*gen.DO)
	return r
}
