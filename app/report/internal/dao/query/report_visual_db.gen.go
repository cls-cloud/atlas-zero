// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"report/internal/dao/model"
)

func newReportVisualDb(db *gorm.DB, opts ...gen.DOOption) reportVisualDb {
	_reportVisualDb := reportVisualDb{}

	_reportVisualDb.reportVisualDbDo.UseDB(db, opts...)
	_reportVisualDb.reportVisualDbDo.UseModel(&model.ReportVisualDb{})

	tableName := _reportVisualDb.reportVisualDbDo.TableName()
	_reportVisualDb.ALL = field.NewAsterisk(tableName)
	_reportVisualDb.UUID = field.NewString(tableName, "uuid")
	_reportVisualDb.CreatorID = field.NewString(tableName, "creator_id")
	_reportVisualDb.CreateTime = field.NewTime(tableName, "create_time")
	_reportVisualDb.Creator = field.NewString(tableName, "creator")
	_reportVisualDb.ModifierID = field.NewString(tableName, "modifier_id")
	_reportVisualDb.Modifier = field.NewString(tableName, "modifier")
	_reportVisualDb.ModifyTime = field.NewTime(tableName, "modify_time")
	_reportVisualDb.CreatorOrgID = field.NewInt32(tableName, "creator_org_id")
	_reportVisualDb.TenantUUID = field.NewString(tableName, "tenant_uuid")
	_reportVisualDb.Name = field.NewString(tableName, "name")
	_reportVisualDb.DriverClass = field.NewString(tableName, "driver_class")
	_reportVisualDb.URL = field.NewString(tableName, "url")
	_reportVisualDb.Username = field.NewString(tableName, "username")
	_reportVisualDb.Password = field.NewString(tableName, "password")
	_reportVisualDb.Remark = field.NewString(tableName, "remark")
	_reportVisualDb.Status = field.NewInt32(tableName, "status")
	_reportVisualDb.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_reportVisualDb.fillFieldMap()

	return _reportVisualDb
}

// reportVisualDb 可视化数据源配置表
type reportVisualDb struct {
	reportVisualDbDo reportVisualDbDo

	ALL          field.Asterisk
	UUID         field.String // 主键
	CreatorID    field.String // 创建人id
	CreateTime   field.Time   // 创建人姓名
	Creator      field.String // 创建人
	ModifierID   field.String // 修改人id
	Modifier     field.String // 修改人
	ModifyTime   field.Time   // 修改时间
	CreatorOrgID field.Int32  // 创建人组织结构id
	TenantUUID   field.String // 租户UUID
	Name         field.String // 名称
	DriverClass  field.String // 驱动类
	URL          field.String // 连接地址
	Username     field.String // 用户名
	Password     field.String // 密码
	Remark       field.String // 备注
	Status       field.Int32  // 状态
	IsDeleted    field.Int32  // 是否已删除

	fieldMap map[string]field.Expr
}

func (r reportVisualDb) Table(newTableName string) *reportVisualDb {
	r.reportVisualDbDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reportVisualDb) As(alias string) *reportVisualDb {
	r.reportVisualDbDo.DO = *(r.reportVisualDbDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reportVisualDb) updateTableName(table string) *reportVisualDb {
	r.ALL = field.NewAsterisk(table)
	r.UUID = field.NewString(table, "uuid")
	r.CreatorID = field.NewString(table, "creator_id")
	r.CreateTime = field.NewTime(table, "create_time")
	r.Creator = field.NewString(table, "creator")
	r.ModifierID = field.NewString(table, "modifier_id")
	r.Modifier = field.NewString(table, "modifier")
	r.ModifyTime = field.NewTime(table, "modify_time")
	r.CreatorOrgID = field.NewInt32(table, "creator_org_id")
	r.TenantUUID = field.NewString(table, "tenant_uuid")
	r.Name = field.NewString(table, "name")
	r.DriverClass = field.NewString(table, "driver_class")
	r.URL = field.NewString(table, "url")
	r.Username = field.NewString(table, "username")
	r.Password = field.NewString(table, "password")
	r.Remark = field.NewString(table, "remark")
	r.Status = field.NewInt32(table, "status")
	r.IsDeleted = field.NewInt32(table, "is_deleted")

	r.fillFieldMap()

	return r
}

func (r *reportVisualDb) WithContext(ctx context.Context) *reportVisualDbDo {
	return r.reportVisualDbDo.WithContext(ctx)
}

func (r reportVisualDb) TableName() string { return r.reportVisualDbDo.TableName() }

func (r reportVisualDb) Alias() string { return r.reportVisualDbDo.Alias() }

func (r reportVisualDb) Columns(cols ...field.Expr) gen.Columns {
	return r.reportVisualDbDo.Columns(cols...)
}

func (r *reportVisualDb) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reportVisualDb) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 17)
	r.fieldMap["uuid"] = r.UUID
	r.fieldMap["creator_id"] = r.CreatorID
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["creator"] = r.Creator
	r.fieldMap["modifier_id"] = r.ModifierID
	r.fieldMap["modifier"] = r.Modifier
	r.fieldMap["modify_time"] = r.ModifyTime
	r.fieldMap["creator_org_id"] = r.CreatorOrgID
	r.fieldMap["tenant_uuid"] = r.TenantUUID
	r.fieldMap["name"] = r.Name
	r.fieldMap["driver_class"] = r.DriverClass
	r.fieldMap["url"] = r.URL
	r.fieldMap["username"] = r.Username
	r.fieldMap["password"] = r.Password
	r.fieldMap["remark"] = r.Remark
	r.fieldMap["status"] = r.Status
	r.fieldMap["is_deleted"] = r.IsDeleted
}

func (r reportVisualDb) clone(db *gorm.DB) reportVisualDb {
	r.reportVisualDbDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reportVisualDb) replaceDB(db *gorm.DB) reportVisualDb {
	r.reportVisualDbDo.ReplaceDB(db)
	return r
}

type reportVisualDbDo struct{ gen.DO }

func (r reportVisualDbDo) Debug() *reportVisualDbDo {
	return r.withDO(r.DO.Debug())
}

func (r reportVisualDbDo) WithContext(ctx context.Context) *reportVisualDbDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportVisualDbDo) ReadDB() *reportVisualDbDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportVisualDbDo) WriteDB() *reportVisualDbDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportVisualDbDo) Session(config *gorm.Session) *reportVisualDbDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportVisualDbDo) Clauses(conds ...clause.Expression) *reportVisualDbDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportVisualDbDo) Returning(value interface{}, columns ...string) *reportVisualDbDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportVisualDbDo) Not(conds ...gen.Condition) *reportVisualDbDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportVisualDbDo) Or(conds ...gen.Condition) *reportVisualDbDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportVisualDbDo) Select(conds ...field.Expr) *reportVisualDbDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportVisualDbDo) Where(conds ...gen.Condition) *reportVisualDbDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportVisualDbDo) Order(conds ...field.Expr) *reportVisualDbDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportVisualDbDo) Distinct(cols ...field.Expr) *reportVisualDbDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportVisualDbDo) Omit(cols ...field.Expr) *reportVisualDbDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportVisualDbDo) Join(table schema.Tabler, on ...field.Expr) *reportVisualDbDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportVisualDbDo) LeftJoin(table schema.Tabler, on ...field.Expr) *reportVisualDbDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportVisualDbDo) RightJoin(table schema.Tabler, on ...field.Expr) *reportVisualDbDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportVisualDbDo) Group(cols ...field.Expr) *reportVisualDbDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportVisualDbDo) Having(conds ...gen.Condition) *reportVisualDbDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportVisualDbDo) Limit(limit int) *reportVisualDbDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportVisualDbDo) Offset(offset int) *reportVisualDbDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportVisualDbDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *reportVisualDbDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportVisualDbDo) Unscoped() *reportVisualDbDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportVisualDbDo) Create(values ...*model.ReportVisualDb) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportVisualDbDo) CreateInBatches(values []*model.ReportVisualDb, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportVisualDbDo) Save(values ...*model.ReportVisualDb) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportVisualDbDo) First() (*model.ReportVisualDb, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualDb), nil
	}
}

func (r reportVisualDbDo) Take() (*model.ReportVisualDb, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualDb), nil
	}
}

func (r reportVisualDbDo) Last() (*model.ReportVisualDb, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualDb), nil
	}
}

func (r reportVisualDbDo) Find() ([]*model.ReportVisualDb, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReportVisualDb), err
}

func (r reportVisualDbDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportVisualDb, err error) {
	buf := make([]*model.ReportVisualDb, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportVisualDbDo) FindInBatches(result *[]*model.ReportVisualDb, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportVisualDbDo) Attrs(attrs ...field.AssignExpr) *reportVisualDbDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportVisualDbDo) Assign(attrs ...field.AssignExpr) *reportVisualDbDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportVisualDbDo) Joins(fields ...field.RelationField) *reportVisualDbDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportVisualDbDo) Preload(fields ...field.RelationField) *reportVisualDbDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportVisualDbDo) FirstOrInit() (*model.ReportVisualDb, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualDb), nil
	}
}

func (r reportVisualDbDo) FirstOrCreate() (*model.ReportVisualDb, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportVisualDb), nil
	}
}

func (r reportVisualDbDo) FindByPage(offset int, limit int) (result []*model.ReportVisualDb, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportVisualDbDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportVisualDbDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportVisualDbDo) Delete(models ...*model.ReportVisualDb) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportVisualDbDo) withDO(do gen.Dao) *reportVisualDbDo {
	r.DO = *do.(*gen.DO)
	return r
}
