// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: desc/desc.proto

package monitor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoginInfoRpc_Save_FullMethodName = "/monitor.LoginInfoRpc/Save"
)

// LoginInfoRpcClient is the client API for LoginInfoRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginInfoRpcClient interface {
	Save(ctx context.Context, in *LoginInfoReq, opts ...grpc.CallOption) (*EmptyResp, error)
}

type loginInfoRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginInfoRpcClient(cc grpc.ClientConnInterface) LoginInfoRpcClient {
	return &loginInfoRpcClient{cc}
}

func (c *loginInfoRpcClient) Save(ctx context.Context, in *LoginInfoReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, LoginInfoRpc_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginInfoRpcServer is the server API for LoginInfoRpc service.
// All implementations must embed UnimplementedLoginInfoRpcServer
// for forward compatibility.
type LoginInfoRpcServer interface {
	Save(context.Context, *LoginInfoReq) (*EmptyResp, error)
	mustEmbedUnimplementedLoginInfoRpcServer()
}

// UnimplementedLoginInfoRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoginInfoRpcServer struct{}

func (UnimplementedLoginInfoRpcServer) Save(context.Context, *LoginInfoReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedLoginInfoRpcServer) mustEmbedUnimplementedLoginInfoRpcServer() {}
func (UnimplementedLoginInfoRpcServer) testEmbeddedByValue()                      {}

// UnsafeLoginInfoRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginInfoRpcServer will
// result in compilation errors.
type UnsafeLoginInfoRpcServer interface {
	mustEmbedUnimplementedLoginInfoRpcServer()
}

func RegisterLoginInfoRpcServer(s grpc.ServiceRegistrar, srv LoginInfoRpcServer) {
	// If the following call pancis, it indicates UnimplementedLoginInfoRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoginInfoRpc_ServiceDesc, srv)
}

func _LoginInfoRpc_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginInfoRpcServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginInfoRpc_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginInfoRpcServer).Save(ctx, req.(*LoginInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginInfoRpc_ServiceDesc is the grpc.ServiceDesc for LoginInfoRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginInfoRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.LoginInfoRpc",
	HandlerType: (*LoginInfoRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _LoginInfoRpc_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desc/desc.proto",
}

const (
	OperLogRpc_Save_FullMethodName = "/monitor.OperLogRpc/Save"
)

// OperLogRpcClient is the client API for OperLogRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperLogRpcClient interface {
	Save(ctx context.Context, in *OperLogReq, opts ...grpc.CallOption) (*EmptyResp, error)
}

type operLogRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewOperLogRpcClient(cc grpc.ClientConnInterface) OperLogRpcClient {
	return &operLogRpcClient{cc}
}

func (c *operLogRpcClient) Save(ctx context.Context, in *OperLogReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, OperLogRpc_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperLogRpcServer is the server API for OperLogRpc service.
// All implementations must embed UnimplementedOperLogRpcServer
// for forward compatibility.
type OperLogRpcServer interface {
	Save(context.Context, *OperLogReq) (*EmptyResp, error)
	mustEmbedUnimplementedOperLogRpcServer()
}

// UnimplementedOperLogRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOperLogRpcServer struct{}

func (UnimplementedOperLogRpcServer) Save(context.Context, *OperLogReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedOperLogRpcServer) mustEmbedUnimplementedOperLogRpcServer() {}
func (UnimplementedOperLogRpcServer) testEmbeddedByValue()                    {}

// UnsafeOperLogRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperLogRpcServer will
// result in compilation errors.
type UnsafeOperLogRpcServer interface {
	mustEmbedUnimplementedOperLogRpcServer()
}

func RegisterOperLogRpcServer(s grpc.ServiceRegistrar, srv OperLogRpcServer) {
	// If the following call pancis, it indicates UnimplementedOperLogRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OperLogRpc_ServiceDesc, srv)
}

func _OperLogRpc_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperLogRpcServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperLogRpc_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperLogRpcServer).Save(ctx, req.(*OperLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OperLogRpc_ServiceDesc is the grpc.ServiceDesc for OperLogRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperLogRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.OperLogRpc",
	HandlerType: (*OperLogRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _OperLogRpc_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desc/desc.proto",
}
