// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"resource/internal/dao/model"
)

func newSysOssConfig(db *gorm.DB, opts ...gen.DOOption) sysOssConfig {
	_sysOssConfig := sysOssConfig{}

	_sysOssConfig.sysOssConfigDo.UseDB(db, opts...)
	_sysOssConfig.sysOssConfigDo.UseModel(&model.SysOssConfig{})

	tableName := _sysOssConfig.sysOssConfigDo.TableName()
	_sysOssConfig.ALL = field.NewAsterisk(tableName)
	_sysOssConfig.OssConfigID = field.NewString(tableName, "oss_config_id")
	_sysOssConfig.TenantID = field.NewString(tableName, "tenant_id")
	_sysOssConfig.ConfigKey = field.NewString(tableName, "config_key")
	_sysOssConfig.AccessKey = field.NewString(tableName, "access_key")
	_sysOssConfig.SecretKey = field.NewString(tableName, "secret_key")
	_sysOssConfig.BucketName = field.NewString(tableName, "bucket_name")
	_sysOssConfig.Prefix = field.NewString(tableName, "prefix")
	_sysOssConfig.Endpoint = field.NewString(tableName, "endpoint")
	_sysOssConfig.Domain = field.NewString(tableName, "domain")
	_sysOssConfig.IsHTTPS = field.NewString(tableName, "is_https")
	_sysOssConfig.Region = field.NewString(tableName, "region")
	_sysOssConfig.AccessPolicy = field.NewString(tableName, "access_policy")
	_sysOssConfig.Status = field.NewString(tableName, "status")
	_sysOssConfig.Ext1 = field.NewString(tableName, "ext1")
	_sysOssConfig.CreateDept = field.NewInt64(tableName, "create_dept")
	_sysOssConfig.CreateBy = field.NewInt64(tableName, "create_by")
	_sysOssConfig.CreateTime = field.NewTime(tableName, "create_time")
	_sysOssConfig.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysOssConfig.UpdateTime = field.NewTime(tableName, "update_time")
	_sysOssConfig.Remark = field.NewString(tableName, "remark")

	_sysOssConfig.fillFieldMap()

	return _sysOssConfig
}

// sysOssConfig 对象存储配置表
type sysOssConfig struct {
	sysOssConfigDo sysOssConfigDo

	ALL          field.Asterisk
	OssConfigID  field.String // 主键
	TenantID     field.String // 租户编号
	ConfigKey    field.String // 配置key
	AccessKey    field.String // accessKey
	SecretKey    field.String // 秘钥
	BucketName   field.String // 桶名称
	Prefix       field.String // 前缀
	Endpoint     field.String // 访问站点
	Domain       field.String // 自定义域名
	IsHTTPS      field.String // 是否https（Y=是,N=否）
	Region       field.String // 域
	AccessPolicy field.String // 桶权限类型(0=private 1=public 2=custom)
	Status       field.String // 是否默认（0=是,1=否）
	Ext1         field.String // 扩展字段
	CreateDept   field.Int64  // 创建部门
	CreateBy     field.Int64  // 创建者
	CreateTime   field.Time   // 创建时间
	UpdateBy     field.Int64  // 更新者
	UpdateTime   field.Time   // 更新时间
	Remark       field.String // 备注

	fieldMap map[string]field.Expr
}

func (s sysOssConfig) Table(newTableName string) *sysOssConfig {
	s.sysOssConfigDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysOssConfig) As(alias string) *sysOssConfig {
	s.sysOssConfigDo.DO = *(s.sysOssConfigDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysOssConfig) updateTableName(table string) *sysOssConfig {
	s.ALL = field.NewAsterisk(table)
	s.OssConfigID = field.NewString(table, "oss_config_id")
	s.TenantID = field.NewString(table, "tenant_id")
	s.ConfigKey = field.NewString(table, "config_key")
	s.AccessKey = field.NewString(table, "access_key")
	s.SecretKey = field.NewString(table, "secret_key")
	s.BucketName = field.NewString(table, "bucket_name")
	s.Prefix = field.NewString(table, "prefix")
	s.Endpoint = field.NewString(table, "endpoint")
	s.Domain = field.NewString(table, "domain")
	s.IsHTTPS = field.NewString(table, "is_https")
	s.Region = field.NewString(table, "region")
	s.AccessPolicy = field.NewString(table, "access_policy")
	s.Status = field.NewString(table, "status")
	s.Ext1 = field.NewString(table, "ext1")
	s.CreateDept = field.NewInt64(table, "create_dept")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.Remark = field.NewString(table, "remark")

	s.fillFieldMap()

	return s
}

func (s *sysOssConfig) WithContext(ctx context.Context) *sysOssConfigDo {
	return s.sysOssConfigDo.WithContext(ctx)
}

func (s sysOssConfig) TableName() string { return s.sysOssConfigDo.TableName() }

func (s sysOssConfig) Alias() string { return s.sysOssConfigDo.Alias() }

func (s sysOssConfig) Columns(cols ...field.Expr) gen.Columns {
	return s.sysOssConfigDo.Columns(cols...)
}

func (s *sysOssConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysOssConfig) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 20)
	s.fieldMap["oss_config_id"] = s.OssConfigID
	s.fieldMap["tenant_id"] = s.TenantID
	s.fieldMap["config_key"] = s.ConfigKey
	s.fieldMap["access_key"] = s.AccessKey
	s.fieldMap["secret_key"] = s.SecretKey
	s.fieldMap["bucket_name"] = s.BucketName
	s.fieldMap["prefix"] = s.Prefix
	s.fieldMap["endpoint"] = s.Endpoint
	s.fieldMap["domain"] = s.Domain
	s.fieldMap["is_https"] = s.IsHTTPS
	s.fieldMap["region"] = s.Region
	s.fieldMap["access_policy"] = s.AccessPolicy
	s.fieldMap["status"] = s.Status
	s.fieldMap["ext1"] = s.Ext1
	s.fieldMap["create_dept"] = s.CreateDept
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["remark"] = s.Remark
}

func (s sysOssConfig) clone(db *gorm.DB) sysOssConfig {
	s.sysOssConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysOssConfig) replaceDB(db *gorm.DB) sysOssConfig {
	s.sysOssConfigDo.ReplaceDB(db)
	return s
}

type sysOssConfigDo struct{ gen.DO }

func (s sysOssConfigDo) Debug() *sysOssConfigDo {
	return s.withDO(s.DO.Debug())
}

func (s sysOssConfigDo) WithContext(ctx context.Context) *sysOssConfigDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysOssConfigDo) ReadDB() *sysOssConfigDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysOssConfigDo) WriteDB() *sysOssConfigDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysOssConfigDo) Session(config *gorm.Session) *sysOssConfigDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysOssConfigDo) Clauses(conds ...clause.Expression) *sysOssConfigDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysOssConfigDo) Returning(value interface{}, columns ...string) *sysOssConfigDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysOssConfigDo) Not(conds ...gen.Condition) *sysOssConfigDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysOssConfigDo) Or(conds ...gen.Condition) *sysOssConfigDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysOssConfigDo) Select(conds ...field.Expr) *sysOssConfigDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysOssConfigDo) Where(conds ...gen.Condition) *sysOssConfigDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysOssConfigDo) Order(conds ...field.Expr) *sysOssConfigDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysOssConfigDo) Distinct(cols ...field.Expr) *sysOssConfigDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysOssConfigDo) Omit(cols ...field.Expr) *sysOssConfigDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysOssConfigDo) Join(table schema.Tabler, on ...field.Expr) *sysOssConfigDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysOssConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysOssConfigDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysOssConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysOssConfigDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysOssConfigDo) Group(cols ...field.Expr) *sysOssConfigDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysOssConfigDo) Having(conds ...gen.Condition) *sysOssConfigDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysOssConfigDo) Limit(limit int) *sysOssConfigDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysOssConfigDo) Offset(offset int) *sysOssConfigDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysOssConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysOssConfigDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysOssConfigDo) Unscoped() *sysOssConfigDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysOssConfigDo) Create(values ...*model.SysOssConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysOssConfigDo) CreateInBatches(values []*model.SysOssConfig, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysOssConfigDo) Save(values ...*model.SysOssConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysOssConfigDo) First() (*model.SysOssConfig, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOssConfig), nil
	}
}

func (s sysOssConfigDo) Take() (*model.SysOssConfig, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOssConfig), nil
	}
}

func (s sysOssConfigDo) Last() (*model.SysOssConfig, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOssConfig), nil
	}
}

func (s sysOssConfigDo) Find() ([]*model.SysOssConfig, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysOssConfig), err
}

func (s sysOssConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysOssConfig, err error) {
	buf := make([]*model.SysOssConfig, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysOssConfigDo) FindInBatches(result *[]*model.SysOssConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysOssConfigDo) Attrs(attrs ...field.AssignExpr) *sysOssConfigDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysOssConfigDo) Assign(attrs ...field.AssignExpr) *sysOssConfigDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysOssConfigDo) Joins(fields ...field.RelationField) *sysOssConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysOssConfigDo) Preload(fields ...field.RelationField) *sysOssConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysOssConfigDo) FirstOrInit() (*model.SysOssConfig, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOssConfig), nil
	}
}

func (s sysOssConfigDo) FirstOrCreate() (*model.SysOssConfig, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOssConfig), nil
	}
}

func (s sysOssConfigDo) FindByPage(offset int, limit int) (result []*model.SysOssConfig, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysOssConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysOssConfigDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysOssConfigDo) Delete(models ...*model.SysOssConfig) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysOssConfigDo) withDO(do gen.Dao) *sysOssConfigDo {
	s.DO = *do.(*gen.DO)
	return s
}
