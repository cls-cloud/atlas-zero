// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"resource/internal/dao/model"
)

func newSysOss(db *gorm.DB, opts ...gen.DOOption) sysOss {
	_sysOss := sysOss{}

	_sysOss.sysOssDo.UseDB(db, opts...)
	_sysOss.sysOssDo.UseModel(&model.SysOss{})

	tableName := _sysOss.sysOssDo.TableName()
	_sysOss.ALL = field.NewAsterisk(tableName)
	_sysOss.OssID = field.NewString(tableName, "oss_id")
	_sysOss.TenantID = field.NewString(tableName, "tenant_id")
	_sysOss.FileName = field.NewString(tableName, "file_name")
	_sysOss.OriginalName = field.NewString(tableName, "original_name")
	_sysOss.FileSuffix = field.NewString(tableName, "file_suffix")
	_sysOss.URL = field.NewString(tableName, "url")
	_sysOss.Ext1 = field.NewString(tableName, "ext1")
	_sysOss.CreateDept = field.NewInt64(tableName, "create_dept")
	_sysOss.CreateTime = field.NewTime(tableName, "create_time")
	_sysOss.CreateBy = field.NewInt64(tableName, "create_by")
	_sysOss.UpdateTime = field.NewTime(tableName, "update_time")
	_sysOss.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysOss.Service = field.NewString(tableName, "service")

	_sysOss.fillFieldMap()

	return _sysOss
}

// sysOss OSS对象存储表
type sysOss struct {
	sysOssDo sysOssDo

	ALL          field.Asterisk
	OssID        field.String // 对象存储主键
	TenantID     field.String // 租户编号
	FileName     field.String // 文件名
	OriginalName field.String // 原名
	FileSuffix   field.String // 文件后缀名
	URL          field.String // URL地址
	Ext1         field.String // 扩展字段
	CreateDept   field.Int64  // 创建部门
	CreateTime   field.Time   // 创建时间
	CreateBy     field.Int64  // 上传人
	UpdateTime   field.Time   // 更新时间
	UpdateBy     field.Int64  // 更新人
	Service      field.String // 服务商

	fieldMap map[string]field.Expr
}

func (s sysOss) Table(newTableName string) *sysOss {
	s.sysOssDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysOss) As(alias string) *sysOss {
	s.sysOssDo.DO = *(s.sysOssDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysOss) updateTableName(table string) *sysOss {
	s.ALL = field.NewAsterisk(table)
	s.OssID = field.NewString(table, "oss_id")
	s.TenantID = field.NewString(table, "tenant_id")
	s.FileName = field.NewString(table, "file_name")
	s.OriginalName = field.NewString(table, "original_name")
	s.FileSuffix = field.NewString(table, "file_suffix")
	s.URL = field.NewString(table, "url")
	s.Ext1 = field.NewString(table, "ext1")
	s.CreateDept = field.NewInt64(table, "create_dept")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.Service = field.NewString(table, "service")

	s.fillFieldMap()

	return s
}

func (s *sysOss) WithContext(ctx context.Context) *sysOssDo { return s.sysOssDo.WithContext(ctx) }

func (s sysOss) TableName() string { return s.sysOssDo.TableName() }

func (s sysOss) Alias() string { return s.sysOssDo.Alias() }

func (s sysOss) Columns(cols ...field.Expr) gen.Columns { return s.sysOssDo.Columns(cols...) }

func (s *sysOss) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysOss) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["oss_id"] = s.OssID
	s.fieldMap["tenant_id"] = s.TenantID
	s.fieldMap["file_name"] = s.FileName
	s.fieldMap["original_name"] = s.OriginalName
	s.fieldMap["file_suffix"] = s.FileSuffix
	s.fieldMap["url"] = s.URL
	s.fieldMap["ext1"] = s.Ext1
	s.fieldMap["create_dept"] = s.CreateDept
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["service"] = s.Service
}

func (s sysOss) clone(db *gorm.DB) sysOss {
	s.sysOssDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysOss) replaceDB(db *gorm.DB) sysOss {
	s.sysOssDo.ReplaceDB(db)
	return s
}

type sysOssDo struct{ gen.DO }

func (s sysOssDo) Debug() *sysOssDo {
	return s.withDO(s.DO.Debug())
}

func (s sysOssDo) WithContext(ctx context.Context) *sysOssDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysOssDo) ReadDB() *sysOssDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysOssDo) WriteDB() *sysOssDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysOssDo) Session(config *gorm.Session) *sysOssDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysOssDo) Clauses(conds ...clause.Expression) *sysOssDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysOssDo) Returning(value interface{}, columns ...string) *sysOssDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysOssDo) Not(conds ...gen.Condition) *sysOssDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysOssDo) Or(conds ...gen.Condition) *sysOssDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysOssDo) Select(conds ...field.Expr) *sysOssDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysOssDo) Where(conds ...gen.Condition) *sysOssDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysOssDo) Order(conds ...field.Expr) *sysOssDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysOssDo) Distinct(cols ...field.Expr) *sysOssDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysOssDo) Omit(cols ...field.Expr) *sysOssDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysOssDo) Join(table schema.Tabler, on ...field.Expr) *sysOssDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysOssDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysOssDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysOssDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysOssDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysOssDo) Group(cols ...field.Expr) *sysOssDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysOssDo) Having(conds ...gen.Condition) *sysOssDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysOssDo) Limit(limit int) *sysOssDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysOssDo) Offset(offset int) *sysOssDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysOssDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysOssDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysOssDo) Unscoped() *sysOssDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysOssDo) Create(values ...*model.SysOss) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysOssDo) CreateInBatches(values []*model.SysOss, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysOssDo) Save(values ...*model.SysOss) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysOssDo) First() (*model.SysOss, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOss), nil
	}
}

func (s sysOssDo) Take() (*model.SysOss, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOss), nil
	}
}

func (s sysOssDo) Last() (*model.SysOss, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOss), nil
	}
}

func (s sysOssDo) Find() ([]*model.SysOss, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysOss), err
}

func (s sysOssDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysOss, err error) {
	buf := make([]*model.SysOss, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysOssDo) FindInBatches(result *[]*model.SysOss, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysOssDo) Attrs(attrs ...field.AssignExpr) *sysOssDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysOssDo) Assign(attrs ...field.AssignExpr) *sysOssDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysOssDo) Joins(fields ...field.RelationField) *sysOssDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysOssDo) Preload(fields ...field.RelationField) *sysOssDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysOssDo) FirstOrInit() (*model.SysOss, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOss), nil
	}
}

func (s sysOssDo) FirstOrCreate() (*model.SysOss, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOss), nil
	}
}

func (s sysOssDo) FindByPage(offset int, limit int) (result []*model.SysOss, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysOssDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysOssDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysOssDo) Delete(models ...*model.SysOss) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysOssDo) withDO(do gen.Dao) *sysOssDo {
	s.DO = *do.(*gen.DO)
	return s
}
